openapi: 3.1.0
info:
  title: CryptoSat Intelligence - Multi-Pair Trading Data Gateway API (GPTs Compat)
  description: |
    üõ∞Ô∏è CryptoSat Intelligence ‚Äî GPTs-compatible OpenAPI.
    Perubahan kompatibilitas (tanpa mengurangi kapabilitas inti):
    - Parameter **INLINE** (tanpa $ref) agar terbaca oleh GPT Actions.
    - Hanya **1 security scheme** (ApiKey) karena GPTs tidak mendukung multi-scheme.
    - Tetap mempertahankan error Problem Details & RateLimit headers.
  version: '4.0.1-gpts'
  contact:
    email: admin@guardiansofthegreentoken.com
    url: https://guardiansofthegreentoken.com

servers:
  - url: https://guardiansofthegreentoken.com
    description: Production server with SSL

tags:
  - name: Multi-Pair Analysis
  - name: Smart Money Concepts
  - name: Volume Delta Analysis
  - name: Technical Indicators
  - name: System Monitoring
  - name: Legacy SOL Endpoints

security:
  - ApiKeyAuth: []

paths:
  /api/pairs/supported:
    get:
      operationId: getSupportedTradingPairs
      summary: Get all supported trading pairs
      tags: [Multi-Pair Analysis]
      responses:
        '200':
          description: List of supported trading pairs
          headers:
            RateLimit-Limit: { description: 'Max requests in window', schema: { type: integer, minimum: 0 } }
            RateLimit-Remaining: { description: 'Remaining in window', schema: { type: integer, minimum: 0 } }
            RateLimit-Reset: { description: 'Seconds to reset', schema: { type: integer, minimum: 0 } }
            RateLimit-Policy: { description: 'RateLimit policy string', schema: { type: string } }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      pairs:
                        type: array
                        items: { type: string }
                        example: ["BTC","ETH","SOL","ADA","AVAX","DOGE","UNI","MATIC","LTC","BCH"]
                  timestamp: { type: string, format: date-time, example: "2025-09-06T14:30:00Z" }
        '401':
          $ref: '#/components/responses/ProblemResponse'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ProblemResponse'

  /api/{pair}/complete:
    get:
      operationId: getCompleteAnalysis
      summary: Get comprehensive trading data for any supported pair
      tags: [Multi-Pair Analysis]
      parameters:
        - name: pair
          in: path
          required: true
          description: Trading pair symbol (e.g., BTC, ETH, SOL)
          schema:
            type: string
            pattern: '^[A-Z0-9]{2,10}$'
          example: BTC
      responses:
        '200':
          description: Complete trading data for the specified pair
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
            RateLimit-Policy: { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteAnalysisResponse'
        '400': { $ref: '#/components/responses/ProblemResponse' }
        '401': { $ref: '#/components/responses/ProblemResponse' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/{pair}/smc:
    get:
      operationId: getSmartMoneyConcepts
      summary: Get Smart Money Concepts analysis for any pair
      tags: [Smart Money Concepts]
      parameters:
        - name: pair
          in: path
          required: true
          description: Trading pair symbol (e.g., BTC, ETH, SOL)
          schema:
            type: string
            pattern: '^[A-Z0-9]{2,10}$'
          example: BTC
      responses:
        '200':
          description: Smart Money Concepts analysis
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
            RateLimit-Policy: { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMCAnalysisResponse'
        '400': { $ref: '#/components/responses/ProblemResponse' }
        '401': { $ref: '#/components/responses/ProblemResponse' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/{pair}/cvd:
    get:
      operationId: getCVDAnalysis
      summary: Get Cumulative Volume Delta analysis for any pair
      tags: [Volume Delta Analysis]
      parameters:
        - name: pair
          in: path
          required: true
          description: Trading pair symbol (e.g., BTC, ETH, SOL)
          schema:
            type: string
            pattern: '^[A-Z0-9]{2,10}$'
          example: ETH
      responses:
        '200':
          description: CVD analysis with divergence patterns
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
            RateLimit-Policy: { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CVDAnalysisResponse'
        '400': { $ref: '#/components/responses/ProblemResponse' }
        '401': { $ref: '#/components/responses/ProblemResponse' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/{pair}/technical:
    get:
      operationId: getTechnicalIndicators
      summary: Get technical indicators analysis for any pair
      tags: [Technical Indicators]
      parameters:
        - name: pair
          in: path
          required: true
          description: Trading pair symbol (e.g., BTC, ETH, SOL)
          schema:
            type: string
            pattern: '^[A-Z0-9]{2,10}$'
          example: SOL
      responses:
        '200':
          description: Technical indicators analysis
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
            RateLimit-Policy: { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TechnicalAnalysisResponse'
        '400': { $ref: '#/components/responses/ProblemResponse' }
        '401': { $ref: '#/components/responses/ProblemResponse' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/{pair}/funding:
    get:
      operationId: getFundingRates
      summary: Get funding rates for any pair
      description: Current and historical funding rates for perpetual contracts
      tags: [Multi-Pair Analysis]
      parameters:
        - name: pair
          in: path
          required: true
          description: Trading pair symbol (e.g., BTC, ETH, SOL)
          schema: { type: string, pattern: '^[A-Z0-9]{2,10}$' }
          example: BTC
        - name: start
          in: query
          description: RFC3339 start time (inclusive)
          required: false
          schema: { type: string, format: date-time }
        - name: end
          in: query
          description: RFC3339 end time (exclusive)
          required: false
          schema: { type: string, format: date-time }
        - name: limit
          in: query
          description: Page size (default 100, max 1000)
          required: false
          schema: { type: integer, minimum: 1, maximum: 1000, default: 100 }
        - name: cursor
          in: query
          description: Opaque cursor for pagination
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Funding rates data (current or historical)
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
            RateLimit-Policy: { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundingRateResponse'
        '400': { $ref: '#/components/responses/ProblemResponse' }
        '401': { $ref: '#/components/responses/ProblemResponse' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/{pair}/open-interest:
    get:
      operationId: getOpenInterest
      summary: Get open interest data for any pair
      description: Current open interest data and historical changes
      tags: [Multi-Pair Analysis]
      parameters:
        - name: pair
          in: path
          required: true
          description: Trading pair symbol (e.g., BTC, ETH, SOL)
          schema: { type: string, pattern: '^[A-Z0-9]{2,10}$' }
          example: ETH
        - name: start
          in: query
          description: RFC3339 start time (inclusive)
          required: false
          schema: { type: string, format: date-time }
        - name: end
          in: query
          description: RFC3339 end time (exclusive)
          required: false
          schema: { type: string, format: date-time }
        - name: limit
          in: query
          description: Page size (default 100, max 1000)
          required: false
          schema: { type: integer, minimum: 1, maximum: 1000, default: 100 }
        - name: cursor
          in: query
          description: Opaque cursor for pagination
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Open interest data (current or historical)
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
            RateLimit-Policy: { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenInterestResponse'
        '400': { $ref: '#/components/responses/ProblemResponse' }
        '401': { $ref: '#/components/responses/ProblemResponse' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/sol/complete:
    get:
      operationId: getSOLCompleteData
      summary: Get comprehensive SOL trading data (Legacy)
      tags: [Legacy SOL Endpoints]
      responses:
        '200':
          description: Complete SOL trading data
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
            RateLimit-Policy: { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteAnalysisResponse'
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/sol/smc:
    get:
      operationId: getSOLSmartMoneyConcepts
      summary: Get SOL Smart Money Concepts (Legacy)
      tags: [Legacy SOL Endpoints]
      responses:
        '200':
          description: SOL Smart Money Concepts analysis
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
            RateLimit-Policy: { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMCAnalysisResponse'
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/sol/cvd:
    get:
      operationId: getSOLCVDAnalysis
      summary: Get SOL CVD analysis (Legacy)
      tags: [Legacy SOL Endpoints]
      responses:
        '200':
          description: SOL CVD analysis
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
            RateLimit-Policy: { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CVDAnalysisResponse'
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/sol/funding:
    get:
      operationId: getSOLFundingRates
      summary: Get SOL funding rates (Legacy)
      tags: [Legacy SOL Endpoints]
      responses:
        '200':
          description: SOL funding rates
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
            RateLimit-Policy: { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundingRateResponse'
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/sol/open-interest:
    get:
      operationId: getSOLOpenInterest
      summary: Get SOL open interest (Legacy)
      tags: [Legacy SOL Endpoints]
      responses:
        '200':
          description: SOL open interest data
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
            RateLimit-Policy: { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenInterestResponse'
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /health:
    get:
      operationId: getHealthStatus
      summary: Get system health status
      tags: [System Monitoring]
      responses:
        '200':
          description: System health status
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
            RateLimit-Policy: { schema: { type: string } }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: ["operational", "degraded", "down"]
                        example: "operational"
                      timestamp:
                        type: string
                        format: date-time
                        example: "2025-09-06T14:30:00Z"
                      services:
                        type: object
                        properties:
                          okx:
                            type: string
                            enum: ["connected", "disconnected", "error"]
                            example: "connected"
                          api:
                            type: string
                            enum: ["operational", "degraded", "down"]
                            example: "operational"
        '500': { $ref: '#/components/responses/ProblemResponse' }

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authenticated access.

  responses:
    ProblemResponse:
      description: Standardized error payload (Problem Details)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    TooManyRequests:
      description: Rate limit exceeded
      headers:
        RateLimit-Limit: { schema: { type: integer } }
        RateLimit-Remaining: { schema: { type: integer } }
        RateLimit-Reset: { schema: { type: integer } }
        RateLimit-Policy: { schema: { type: string } }
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'

  schemas:
    CompleteAnalysisResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            ticker:
              type: object
              properties:
                symbol: { type: string, example: "BTC-USDT-SWAP" }
                price: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "110883.6" }
                change24h: { type: string, example: "-1.67%" }
                high24h: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "113250.0" }
                low24h: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "109750.0" }
                volume: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "45287639.82" }
        timestamp: { type: string, format: date-time, example: "2025-09-06T14:30:00Z" }

    SMCAnalysisResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            timeframe: { type: string, example: "1H" }
            trend: { type: string, enum: ["bullish","bearish","ranging"], example: "bearish" }
            lastBOS:
              type: object
              properties:
                type: { type: string, enum: ["bullish","bearish"], example: "bearish" }
                price: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "111250.0" }
                timestamp: { type: string, format: date-time, example: "2025-09-06T13:30:00Z" }
            confidence: { type: number, minimum: 0, maximum: 100, example: 75 }
        timestamp: { type: string, format: date-time, example: "2025-09-06T14:30:00Z" }

    CVDAnalysisResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            timeframe: { type: string, example: "1H" }
            currentCVD: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "639494.09" }
            previousCVD: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "707529.59" }
            deltaChange: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "-68035.50" }
            percentageChange: { type: number, example: -9.61 }
            confidence:
              type: object
              properties:
                overall: { type: number, minimum: 0, maximum: 100, example: 82 }
        timestamp: { type: string, format: date-time, example: "2025-09-06T14:30:00Z" }

    TechnicalAnalysisResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            timeframe: { type: string, example: "1H" }
            rsi:
              type: object
              properties:
                current: { type: number, example: 43.56 }
                period: { type: number, example: 14 }
                signal: { type: string, enum: ["oversold","neutral","overbought"], example: "neutral" }
            ema:
              type: object
              properties:
                ema20: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "111250.5" }
                ema50: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "112100.2" }
                crossover: { type: string, enum: ["bullish","bearish","none"], example: "bearish" }
        timestamp: { type: string, format: date-time, example: "2025-09-06T14:30:00Z" }

    FundingRateResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            instId: { type: string, example: "BTC-USDT-SWAP" }
            fundingRate: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "0.0000888594997051" }
            nextFundingRate: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "0.0001234567890123" }
            nextFundingTime: { type: string, format: date-time, example: "2025-09-06T16:00:00Z" }
            nextCursor: { type: string, nullable: true, example: "eyJwYWdlIjoyfQ==" }
        timestamp: { type: string, format: date-time, example: "2025-09-06T14:30:00Z" }

    OpenInterestResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            instId: { type: string, example: "BTC-USDT-SWAP" }
            oi: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "234567.89" }
            oiUsd: { type: string, pattern: '^-?[0-9]+(\.[0-9]+)?$', example: "25987653210.45" }
            change24h: { type: string, example: "2.34%" }
            nextCursor: { type: string, nullable: true, example: "eyJwYWdlIjozfQ==" }
        timestamp: { type: string, format: date-time, example: "2025-09-06T14:30:00Z" }

    Problem:
      type: object
      required: [type, title]
      properties:
        type: { type: string, format: uri, example: "https://guardiansofthegreentoken.com/problems/rate-limit" }
        title: { type: string, example: "Too Many Requests" }
        status: { type: integer, example: 429 }
        detail: { type: string, example: "Rate limit exceeded. Try again after the reset window." }
        instance: { type: string, format: uri, example: "https://guardiansofthegreentoken.com/api/btc/complete" }
        code: { type: string, example: "RLIMIT_EXCEEDED" }
