Tingkatkan stabilitas & performa dashboard SOL yang berjalan di Replit:
Perbaiki CORS & trust proxy (server/index.ts)
Rapikan OKX WS ping interval (server/services/okx.ts) agar tidak leak, clear interval saat close/error
Hindari koneksi WS ganda di client: buat WebSocketProvider (context) dan gunakan satu koneksi untuk Dashboard/OrderFlow
Optimasi render RealTimeData dengan memoization (useMemo) untuk grouping/cumulative/path SVG
(Opsional) Tambahkan cache TTL sederhana untuk REST OKX agar hemat request
(Opsional) Tutup OKX WS saat tidak ada klien browser, buka lagi saat ada klien
Lingkungan:

Repo monorepo Vite+Express. Jalankan dengan: npm run dev (NODE_ENV=development)
Kunci OKX via Replit Secrets (OKX_API_KEY, OKX_SECRET_KEY, OKX_PASSPHRASE) bila diperlukan
Langkah Implementasi:
A. Server CORS & trust proxy (server/index.ts)

Tambahkan: app.set('trust proxy', 1)
Ganti middleware CORS kustom:
Jika req.headers.origin ada dan masuk whitelist (http://localhost:5000, https://guardiansofthegreentoken.com, domain Replit), set:
Access-Control-Allow-Origin = origin
Vary = Origin
Access-Control-Allow-Credentials = true
Access-Control-Allow-Methods = GET, POST, PUT, DELETE, OPTIONS, PATCH
Access-Control-Allow-Headers = Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control
Respon OPTIONS dengan 200 dan return
Pastikan tidak ada duplikasi/konflik CORS di routes.ts (biarkan rateLimit saja)
B. OKX WS ping interval hygiene (server/services/okx.ts)

Di setupPingPong, sebelum membuat setInterval baru, clear interval lama jika ada
Di ws.on('close') dan ws.on('error'), clear pingInterval
Pastikan attemptReconnect tidak membuat ping interval baru sebelum on('open') memanggil setupPingPong
C. Single WebSocket di client

Buat file client/src/hooks/WebSocketProvider.tsx:
Implementasikan React context yang menyimpan satu koneksi WS (alamat: /ws; untuk prod: wss://guardiansofthegreentoken.com/ws)
Sediakan nilai: isConnected, lastMessage, marketData, systemStatus, connectionStatus, sendMessage, connect, disconnect
Ubah client/src/hooks/useWebSocket.ts agar memakai context (atau ekspor hook useWebSocketContext)
Bungkus App.tsx dengan di sekitar Router
Pastikan Dashboard & OrderFlow memakai hook yang sama sehingga hanya ada 1 koneksi WS per tab
D. Optimasi RealTimeData (client/src/components/real-time-data.tsx)

Gunakan useMemo([orderBook, precision]) untuk:
groupOrdersByPrecision (bids/asks)
perhitungan cumulative volume, depth arrays, maxVolume
kalkulasi buy/sell percentage
Kurangi parseFloat/toLocaleString di dalam map render; lakukan pra-komputasi
Jaga jumlah row dan key stabil seperti saat ini
E. (Opsional) Cache TTL REST OKX (server/services/okx.ts)

Buat cache sederhana per method:
ticker/trades: TTL 2000–3000ms
orderBook: TTL 1000–2000ms
candles: TTL 60–120s
Di getCompleteSOLData, ambil dari cache bila masih valid
F. (Opsional) Matikan OKX WS saat idle

Di server/routes.ts, saat connectedClients.size turun ke 0, set timeout 60s untuk okxService.closeWebSocket(); batalkan jika ada klien baru
Pengujian (Replit):