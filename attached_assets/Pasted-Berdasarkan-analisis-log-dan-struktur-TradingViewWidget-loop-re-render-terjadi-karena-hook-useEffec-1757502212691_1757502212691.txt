Berdasarkan analisis log dan struktur TradingViewWidget, loop re-render terjadi karena hook useEffect selalu dipanggil ulang ketika dependensi yang berubah terus‑menerus (seperti array atau fungsi baru dihasilkan setiap render). Hal ini memicu cleanupWidget, yang menghapus iframe TradingView, kemudian initWidget tidak dipanggil lagi (terhalang oleh guard didInit.current), sehingga widget menghilang. Konsep ini sejalan dengan dokumentasi React: menempatkan banyak variabel/turunan yang berubah di dalam dependency array akan menyebabkan useEffect selalu dipanggil lagi
maxrozen.com
.

Akar Masalah
Penyebab	Penjelasan
Array dan fungsi baru setiap render	Default studies didefinisikan inline (["Volume", "RSI@...", "MACD@..."]), sehingga setiap render menghasilkan array baru. Ketika array tersebut dimasukkan sebagai dependensi useCallback(initWidget), identitas initWidget selalu berubah.
Dependensi initWidget & cleanupWidget di useEffect	useEffect memanggil initWidget pada mount, lalu menempatkannya di dependency array. Karena initWidget selalu berubah, useEffect memicu re-render tak terbatas. Pembersihan (cleanupWidget) berjalan, tetapi didInit.current mencegah re-inisialisasi ulang.
autosize & ukuran campur aduk	Menggunakan autosize: true bersamaan dengan width/height pada konfigurasi widget menyebabkan layout mendadak berubah dan memicu re-render (meskipun bukan penyebab utama).
Cara Mengatasi (Refactor)

Stabilkan dependency: Definisikan array studies di luar komponen (mis. const DEFAULT_STUDIES = [...]) atau pakai useMemo untuk membungkusnya. Dengan cara ini, referensi array tetap sama di antara render sehingga tidak memicu perubahan initWidget.

Hilangkan initWidget dari dependency useEffect: Jika Anda ingin memanggil inisialisasi hanya sekali, jadikan efek useEffect memiliki dependency kosong ([]). Jika ingin re-inisialisasi saat tvSymbol, tvInterval, atau theme berubah, gunakan hanya tiga dependensi tersebut. Jangan memasukkan fungsi atau array yang dibuat setiap render sebagai dependency.

// Contoh efek run once:
useEffect(() => {
  initWidget();
  return () => cleanupWidget();
  // eslint-disable-next-line react-hooks/exhaustive-deps
}, []);  // Tidak ada dependensi → tidak akan re-render


Stabilkan fungsi dengan useCallback + dependensi minimal: Hanya tambahkan tvSymbol, tvInterval, theme, dan dependensi stabil lain ke useCallback untuk initWidget. Pastikan variabel yang jarang berubah ada di dependency array.

Sesuaikan penggunaan autosize: Pilih autosize: true tanpa width/height atau definisikan ukuran secara manual tanpa autosize, untuk mencegah konflik ukuran yang memicu re-render.

Perbaiki symbol: Pastikan properti tvSymbol benar‑benar digunakan (bukan di‑hardcode) saat membuat widget; meski tidak memicu re-render, hal ini penting agar widget konsisten.

Contoh perbaikan kode (ringkasan)
const DEFAULT_STUDIES = ["Volume", "RSI@tv-basicstudies", "MACD@tv-basicstudies"];

export function TradingViewWidget({ studies = DEFAULT_STUDIES, ...props }) {
  const stableStudies = useMemo(() => studies, []);
  const initWidget = useCallback(() => {
    // inisialisasi widget di sini, gunakan symbol: tvSymbol dan stableStudies
  }, [props.tvSymbol, props.interval, props.theme]);  // dependensi stabil

  useEffect(() => {
    initWidget();
    return () => cleanupWidget();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);  // jalankan sekali atau atur dependensi minimal
}

TL;DR

Masalahnya bukan di TradingView‑nya, melainkan di React: useEffect terus memanggil cleanupWidget karena dependensi initWidget berubah setiap render, sehingga chart hilang. Stabilkan dependensi (array/fungsi), hilangkan initWidget dari dependency array useEffect, dan pastikan widget hanya diinisialisasi ulang saat properti penting berubah
maxrozen.com
.