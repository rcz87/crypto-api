Aku langsung kirim preset multi-coin + deploy script yang siap plug-and-play. Framework-nya coin-agnostic: ganti coin/pair → otomatis tarik 100 bar data via CoinGlass v4, hitung rolling percentile (p85/p95/p99), dan nulis config native per coin.

TL;DR

Universal: jalan untuk semua coin/pair yang didukung CoinGlass—resolver dari supported-exchange-pairs dulu, lalu call funding/OI/taker/liquidation sesuai coin. 
CoinGlass-API

Endpoint Standard = No-Limit interval buat history kunci: Funding OHLC, OI (pair & aggregated), Taker Buy/Sell (aggregated), Liquidation (coin aggregated & pair). 
CoinGlass-API
+5
CoinGlass-API
+5
CoinGlass-API
+5

ETF flows (BTC) untuk overlay makro. 
CoinGlass-API

1) Daftar endpoint (resmi v4) yang dipakai

Resolver simbol (futures): /api/futures/supported-exchange-pairs (refresh ~1 menit). 
CoinGlass-API

Funding OHLC (pair): /api/futures/funding-rate/history. 
CoinGlass-API

OI OHLC (aggregated & pair): /api/futures/open-interest/aggregated-history & /api/futures/open-interest/history. 
CoinGlass-API
+1

Taker Buy/Sell (coin aggregated): /api/futures/aggregated-taker-buy-sell-volume/history. (Bisa tambahkan exchange_list=OKX,Binance,Bybit bila perlu.) 
CoinGlass-API

Liquidation (coin aggregated & pair): /api/futures/liquidation/aggregated-history & /api/futures/liquidation/history. (Heatmap/Map = Pro+; kita pakai history.) 
CoinGlass-API
+2
CoinGlass-API
+2

ETF flows (makro BTC): /api/etf/bitcoin/flow-history. 
CoinGlass-API

WS (opsional low-latency): wss://open-ws.coinglass.com/ws-api?cg-api-key=… (ping tiap ~20s). 
CoinGlass-API

2) Generator multi-coin (drop-in)

File: universal_config_generator.py — ambil 100 bar / layer, hitung percentile, tulis <COIN>_native_config.json.

# universal_config_generator.py
import os, json, time, math, argparse, itertools
import httpx, numpy as np

BASE = "https://open-api-v4.coinglass.com"
API_KEY = os.getenv("COINGLASS_API_KEY")
HDRS = {"CG-API-KEY": API_KEY}

def _get(path, params=None):
    r = httpx.get(f"{BASE}{path}", headers=HDRS, params=params, timeout=20)
    r.raise_for_status()
    data = r.json().get("data", [])
    return data

def supported_pairs():
    return _get("/api/futures/supported-exchange-pairs")  # resolver simbol
# docs: supported exchange & pairs. :contentReference[oaicite:10]{index=10}

def percentile(vals, q):  # q in [0,100]
    arr = np.array(vals, dtype=float)
    return float(np.percentile(arr, q).round(2))

def normalize_funding_to_bps8(rate_dec, interval_h=1.0):
    # funding fraction → per 8h bps
    return float(rate_dec) * (8.0/interval_h) * 1e4

def fetch_coin_data(coin: str, bars: int = 100, pair_base="USDT", ex_default="OKX"):
    # 1) Funding OHLC (pair)
    pair = f"{coin}-{pair_base}"
    funding = _get("/api/futures/funding-rate/history",
                   {"pair": pair, "exchange": ex_default, "interval": "1h"})[-bars:]
    funding_bps8 = [normalize_funding_to_bps8(float(x["close"]), 1.0) for x in funding]  # per 8h bps
    # docs: funding OHLC. :contentReference[oaicite:11]{index=11}

    # 2) OI OHLC aggregated (coin)
    oi_agg = _get("/api/futures/open-interest/aggregated-history",
                  {"coin": coin, "interval": "1h"})[-bars:]
    oi_close = [float(x["close"]) for x in oi_agg]
    oi_roc = [0.0] + [ (oi_close[i]-oi_close[i-1])/oi_close[i-1] if oi_close[i-1] else 0.0
                       for i in range(1, len(oi_close)) ]
    # docs: OI aggregated OHLC. :contentReference[oaicite:12]{index=12}

    # 3) Taker ratio (coin aggregated)
    tk = _get("/api/futures/aggregated-taker-buy-sell-volume/history",
              {"coin": coin, "interval": "1h", "exchange_list": "OKX,Binance,Bybit"})[-bars:]
    taker_ratios = []
    for x in tk:
        b = float(x.get("aggregated_buy_volume_usd", 0))
        s = float(x.get("aggregated_sell_volume_usd", 1))
        taker_ratios.append(b / max(1.0, s))
    # docs: taker volume aggregated coin. :contentReference[oaicite:13]{index=13}

    # 4) Liquidation coin aggregated
    liq = _get("/api/futures/liquidation/aggregated-history",
               {"coin": coin, "interval": "1h"})[-bars:]
    long_usd  = [float(x.get("aggregated_long_liquidation_usd", x.get("longLiquidation_usd", 0))) for x in liq]
    short_usd = [float(x.get("aggregated_short_liquidation_usd", x.get("shortLiquidation_usd", 0))) for x in liq]
    liq_total = [l+s for l, s in zip(long_usd, short_usd)]
    # docs: liquidation aggregated history. :contentReference[oaicite:14]{index=14}

    # 5) ETF flows (BTC) — overlay makro (optional)
    etf = _get("/api/etf/bitcoin/flow-history")[-100:]
    etf_abs = [abs(float(row.get("flow_usd", 0))) for row in etf]
    # docs: ETF flow history. :contentReference[oaicite:15]{index=15}

    return {
        "funding_bps8": funding_bps8,
        "taker_ratios": taker_ratios,
        "oi_roc": [x*100 for x in oi_roc],  # to %
        "liq_total": liq_total,
        "etf_abs": etf_abs
    }

def generate_config(coin: str, data: dict):
    # Percentiles (2 decimals)
    p = lambda arr, q: percentile(arr, q)
    fund_p85, fund_p95, fund_p99 = p([abs(x) for x in data["funding_bps8"]],85), p([abs(x) for x in data["funding_bps8"]],95), p([abs(x) for x in data["funding_bps8"]],99)
    tr_p85, tr_p95, tr_p99 = p(data["taker_ratios"],85), p(data["taker_ratios"],95), p(data["taker_ratios"],99)
    oi_p85, oi_p95 = p(data["oi_roc"],85), p(data["oi_roc"],95)
    lq_p85, lq_p95, lq_p99 = p(data["liq_total"],85), p(data["liq_total"],95), p(data["liq_total"],99)
    etf_p85, etf_p95, etf_p99 = p(data["etf_abs"],85), p(data["etf_abs"],95), p(data["etf_abs"],99)

    cfg = {
      "asset": coin,
      "layers": {
        "bias": { "z_watch": 1.0, "z_action": 2.0, "abs_watch": 0.25, "abs_action": 0.60 },
        "funding": {
          "lookback": "30d",
          "use_vol_weight": True,  # bisa dialihkan ke vol-weight endpoint. :contentReference[oaicite:16]{index=16}
          "abs_bps_per_8h": {
            "watch": max(fund_p85, 5.0),
            "action": max(fund_p95, 10.0),
            "extreme": max(fund_p99, 10.0)
          },
          "floors_bps_per_8h": { "watch": 5.0, "action": 10.0 }
        },
        "taker_ratio": {
          "lookback": "30d",
          "hi": { "watch": max(tr_p85, 1.40), "action": max(tr_p95, 1.80), "extreme": max(tr_p99, 1.90) },
          "lo": { "watch": min(0.70, round(2 - tr_p85, 3)), "action": min(0.55, round(2 - tr_p95, 3)), "extreme": 0.50 }
        },
        "oi": {
          "roc_window": "1h",
          "roc_pct": { "watch": oi_p85, "action": max(oi_p95, 5.0) },
          "notes": "Action floor 5% untuk ketahanan regime shift."
        },
        "liquidation": {
          "lookback": "7d",
          "coin_agg_usd": { "watch": lq_p85, "action": lq_p95, "extreme": lq_p99 },
          "pair_confirm": { "enabled": True, "window_bars": 1 }
        },
        "etf_flows": {
          "ma_window": 7,
          "abs_usd": { "watch": etf_p85, "action": etf_p95, "extreme": etf_p99 },
          "multiplier_fallback": { "watch": 1.5, "action": 3.0 }
        }
      },
      "confluence": { "watch_min": 2, "action_min": 3, "require_one_action": True, "anti_liq_flip": True },
      "cooldown": { "dedup_min": 5, "sustain_bars_for_escalation": 3 }
    }
    return cfg

if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument("--coin", required=True)
    ap.add_argument("--bars", type=int, default=100)
    ap.add_argument("--out", required=True)
    args = ap.parse_args()

    if not API_KEY:
        raise SystemExit("COINGLASS_API_KEY not set")
    data = fetch_coin_data(args.coin.upper(), bars=args.bars)
    cfg = generate_config(args.coin.upper(), data)
    os.makedirs(os.path.dirname(args.out), exist_ok=True)
    with open(args.out, "w") as f:
        json.dump(cfg, f, indent=2)
    print(f"[OK] wrote {args.out}")

3) Deploy script (multi-coin)

File: deploy-multicoin.sh — generate & load config untuk top-10 coin.

#!/usr/bin/env bash
set -euo pipefail

: "${COINGLASS_API_KEY:?export COINGLASS_API_KEY first}"

PORTFOLIO=("BTC" "ETH" "SOL" "DOGE" "ADA" "DOT" "MATIC" "LINK" "AVAX" "UNI")
OUTDIR="configs"
BARS=100

echo "== Generating native configs =="
for C in "${PORTFOLIO[@]}"; do
  python3 universal_config_generator.py --coin "$C" --bars "$BARS" --out "${OUTDIR}/${C}_native_config.json"
done

echo "== Smoke test endpoints (1 coin sample: SOL) =="
curl -sS "${BASE:-https://open-api-v4.coinglass.com}/api/futures/funding-rate/history?pair=SOL-USDT&exchange=OKX&interval=1h" -H "CG-API-KEY: ${COINGLASS_API_KEY}" >/dev/null
curl -sS "${BASE:-https://open-api-v4.coinglass.com}/api/futures/open-interest/aggregated-history?coin=SOL&interval=1h" -H "CG-API-KEY: ${COINGLASS_API_KEY}" >/dev/null
curl -sS "${BASE:-https://open-api-v4.coinglass.com}/api/futures/liquidation/aggregated-history?coin=SOL&interval=1h" -H "CG-API-KEY: ${COINGLASS_API_KEY}" >/dev/null
curl -sS "${BASE:-https://open-api-v4.coinglass.com}/api/futures/aggregated-taker-buy-sell-volume/history?coin=SOL&interval=1h&exchange_list=OKX,Binance,Bybit" -H "CG-API-KEY: ${COINGLASS_API_KEY}" >/dev/null

echo "== Deploy Enhanced Sniper =="
# contoh: python -m enhanced_sniper_v2 --config configs/SOL_native_config.json


Funding OHLC, OI aggregated, Liquidation aggregated, Taker aggregated—all available di Standard, sejarah (history) No-Limit interval untuk plan ini. 
CoinGlass-API
+3
CoinGlass-API
+3
CoinGlass-API
+3

exchange_list opsional untuk filter taker/liquidation per beberapa bursa besar. (Jika mau per-exchange breakdown, pakai Liquidation Exchange List.) 
CoinGlass-API

4) Health-check multi-coin (1-liner per coin)

Resolver: cek coin/pair tersedia → supported-exchange-pairs. 
CoinGlass-API

Funding: .../funding-rate/history?pair=<COIN>-USDT&exchange=OKX&interval=1h. 
CoinGlass-API

OI agg: .../open-interest/aggregated-history?coin=<COIN>&interval=1h. 
CoinGlass-API

Liq agg: .../liquidation/aggregated-history?coin=<COIN>&interval=1h. 
CoinGlass-API

Taker agg: .../aggregated-taker-buy-sell-volume/history?coin=<COIN>&interval=1h. 
CoinGlass-API

5) Ops tips (biar sinyal nggak “bawel”)

Dynamic tightening saat liquidation >= p95 7D (coin-agg); reset bila tak sustain 3 bar. Data dari aggregated-history (konfirmasi pair bila perlu). 
CoinGlass-API
+1

WS channel (opsional) untuk early heads-up; ping tiap ~20s. 
CoinGlass-API

Screening cepat kandidat volatil: futures/coins-markets atau futures/pairs-markets. 
CoinGlass-API
+1