openapi: 3.0.3
info:
  title: CryptoSat Intelligence - Multi-Pair Trading Data Gateway API (GPTs Compat)
  description: |
    🛰️ CryptoSat Intelligence — GPTs-compatible OpenAPI with Production Stability.
    
    **🚀 PHASE 2.1: COINGLASS PREMIUM INTELLIGENCE (Sept 15, 2025):**
    - ✅ **CoinGlass Integration**: 11 premium institutional-grade analytics endpoints
    - ✅ **Whale Analytics**: Real-time whale detection and positioning intelligence (>$1M notional)
    - ✅ **Bitcoin ETF Intelligence**: Complete ETF flow tracking and institutional investment analysis
    - ✅ **Market Sentiment Engine**: Advanced sentiment scoring with fear & greed index analysis
    - ✅ **Technical Analysis Suite**: ATR volatility, liquidation heatmaps, orderbook depth analysis
    - ✅ **Options Intelligence**: Comprehensive options open interest analysis with gamma squeeze detection
    - ✅ **Self-Learning AI**: Auto-pattern confidence updates based on trading performance
    - ✅ **Performance Tracking**: Complete trading lifecycle tracking (execution → outcome → learning)
    - ✅ **Neural Networks**: 50 input features with 5-layer architecture
    - ✅ **Enhanced Analytics**: 32+ endpoint categories with institutional-grade analysis
    - ✅ **Dynamic Patterns**: 10 advanced patterns with 95% confidence detection
    
    **🧠 Phase 2 Enhanced AI Features:**
    - **ExecutionRecorder**: Self-learning system with pattern performance analytics
    - **Enhanced Signal Engine**: Neural network predictions with GPT-5 reasoning
    - **Performance APIs**: Win rate tracking, P&L analytics, confidence validation
    - **Adaptive Learning**: Pattern weights auto-adjust based on real trading results
    
    **🔧 GPTs Compatibility Features:**
    - Parameter **INLINE** (tanpa $ref) agar terbaca oleh GPT Actions
    - Single **ApiKey** security scheme (GPTs requirement)
    - Complete error handling dengan Problem Details & RateLimit headers
    - Real-time data dengan comprehensive validation
    
    **🚦 Rate Limiting & Pagination:**
    - **Standardized Headers**: Consistent RateLimit-* headers across all endpoints
    - **Cursor-based Pagination**: Efficient navigation with next/prev links in Link header
    - **Comprehensive Examples**: Real-world scenarios with retry logic guidance
    - **Developer-friendly Documentation**: Clear descriptions and usage patterns
    
    **📚 Developer Usage Examples:**
    
    **🔐 Security & Authentication Examples:**
    ```bash
    # ✅ Public Endpoints (No Authentication Required)
    curl "https://guardiansofthegreentoken.com/health"
    curl "https://guardiansofthegreentoken.com/api/pairs/supported"
    
    # 🔑 Read-Only Scope (Basic Market Data)
    curl -H "X-API-Key: your-read-only-key" \
         "https://guardiansofthegreentoken.com/api/btc/complete"
    curl -H "X-API-Key: your-read-only-key" \
         "https://guardiansofthegreentoken.com/api/eth/funding"
    
    # 🎯 Trading Scope (AI Signals & Advanced Features)
    curl -H "X-API-Key: your-trading-key" \
         "https://guardiansofthegreentoken.com/api/ai/signal"
    curl -H "X-API-Key: your-trading-key" \
         "https://guardiansofthegreentoken.com/api/ai/enhanced-signal"
    
    # 💎 Premium Scope (VIP8 Institutional Analytics)
    curl -H "X-API-Key: your-premium-key" \
         "https://guardiansofthegreentoken.com/api/premium/institutional-analytics"
    ```
    
    **🚦 Access Tier Overview:**
    ```
    Public Access    │ No API Key Required     │ Health checks, supported pairs
    ─────────────────┼─────────────────────────┼─────────────────────────────────
    Read-Only Scope  │ Basic API Key           │ Market data, technical analysis
                     │ 100 req/min            │ Funding rates, open interest
    ─────────────────┼─────────────────────────┼─────────────────────────────────
    Trading Scope    │ Premium API Key         │ AI signals, execution tracking
                     │ 500 req/min            │ Enhanced analysis, trading data
    ─────────────────┼─────────────────────────┼─────────────────────────────────
    Premium Scope    │ Enterprise API Key      │ VIP8 institutional analytics
                     │ 2000 req/min           │ Priority processing, advanced AI
    ```
    
    **⚡ Error Handling by Security Level:**
    ```javascript
    // Handle different authentication scenarios
    async function apiRequest(endpoint, options = {}) {
      const headers = {
        'Content-Type': 'application/json',
        ...options.headers
      };
      
      // Add API key for protected endpoints
      if (!endpoint.includes('/health') && !endpoint.includes('/pairs/supported')) {
        if (!process.env.API_KEY) {
          throw new Error('API key required for protected endpoint');
        }
        headers['X-API-Key'] = process.env.API_KEY;
      }
      
      const response = await fetch(endpoint, { ...options, headers });
      
      if (response.status === 401) {
        throw new Error('Invalid or missing API key');
      }
      if (response.status === 403) {
        throw new Error('Insufficient scope permissions for this endpoint');
      }
      if (response.status === 429) {
        const retryAfter = response.headers.get('Retry-After');
        throw new Error(\`Rate limit exceeded. Retry after \${retryAfter} seconds\`);
      }
      
      return response.json();
    }
    ```
    
    **Rate Limiting Headers:**
    ```
    RateLimit-Limit: 100          # Max requests per window
    RateLimit-Remaining: 42       # Requests left in current window  
    RateLimit-Reset: 1725955260   # Unix timestamp when window resets
    RateLimit-Policy: 100;w=60    # 100 requests per 60-second window
    Retry-After: 18               # Seconds to wait (only in 429 responses)
    ```
    
    **Pagination Example:**
    ```bash
    # First request
    curl -H "X-API-Key: your-key" \
         "https://guardiansofthegreentoken.com/api/btc/funding?limit=50"
    
    # Response includes Link header:
    # Link: </api/btc/funding?cursor=eyJwYWdlIjoyfQ&limit=50>; rel="next"
    
    # Next page request
    curl -H "X-API-Key: your-key" \
         "https://guardiansofthegreentoken.com/api/btc/funding?cursor=eyJwYWdlIjoyfQ&limit=50"
    ```
    
    **Error Handling with Exponential Backoff:**
    ```javascript
    async function apiCall(url, options, maxRetries = 3) {
      for (let i = 0; i <= maxRetries; i++) {
        const response = await fetch(url, options);
        
        if (response.status !== 429) return response;
        
        const retryAfter = response.headers.get('Retry-After') || Math.pow(2, i);
        await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
      }
      throw new Error('Max retries exceeded');
    }
    ```
  version: '5.2.0-gpts-coinglass'
  contact:
    email: admin@guardiansofthegreentoken.com
    url: https://guardiansofthegreentoken.com

servers:
  - url: https://guardiansofthegreentoken.com
    description: Production server with SSL

tags:
  # ===== CORE MARKET DATA =====
  - name: Market Data - Real-time
    description: |
      **🔴 Real-time Market Data Endpoints**
      
      Live market data, current prices, tickers, bid/ask spreads, and real-time market conditions.
      Essential for trading applications requiring up-to-the-second market information.
      
      **Use Cases:**
      - Live price feeds for trading interfaces
      - Real-time market monitoring
      - Current market condition assessment
      - Bid/ask spread analysis
      
      **Data Freshness:** Real-time (<1 second delay)
      **Rate Limits:** Higher limits for premium tiers
      **Caching:** Minimal caching for maximum freshness

  - name: Market Data - Multi-Pair
    description: |
      **📊 Multi-Pair Analysis & Cross-Asset Data**
      
      Comprehensive analysis across multiple trading pairs with cross-asset correlations,
      portfolio-level insights, and multi-pair screening capabilities.
      
      **Features:**
      - Complete analysis for 65+ supported pairs
      - Cross-pair correlation analysis
      - Multi-asset portfolio screening
      - Comparative market metrics
      
      **Supported Pairs:** BTC, ETH, SOL, ADA, AVAX, DOGE, and 60+ others
      **Analysis Depth:** Technical, fundamental, and sentiment analysis
      **Use Cases:** Portfolio management, pair trading, market screening

  - name: Market Data - Derivatives
    description: |
      **⚡ Derivatives & Futures Market Data**
      
      Specialized data for derivatives trading including funding rates, open interest,
      perpetual futures data, and institutional positioning metrics.
      
      **Key Metrics:**
      - Funding rates with predictions
      - Open interest trends and analysis
      - Liquidation levels and risk metrics
      - Institutional flow indicators
      
      **Data Sources:** Multi-exchange aggregation
      **Historical Data:** Full pagination support
      **Refresh Rate:** Every 8 hours for funding, real-time for OI

  # ===== TRADING ANALYSIS =====
  - name: Technical Analysis
    description: |
      **📈 Technical Indicators & Chart Analysis**
      
      Comprehensive technical analysis including RSI, MACD, Bollinger Bands, Moving Averages,
      and other technical indicators with trend detection and signal generation.
      
      **Indicators Available:**
      - RSI (14, 21 period) with overbought/oversold signals
      - MACD with histogram and crossover detection
      - Bollinger Bands with squeeze/expansion analysis
      - Moving Averages (SMA, EMA) with golden/death cross signals
      - Momentum and trend strength indicators
      
      **Signal Quality:** Professional-grade calculations
      **Timeframes:** Multiple timeframe analysis
      **Applications:** Entry/exit timing, trend confirmation

  - name: Smart Money Concepts
    description: |
      **🧠 Institutional Flow & Smart Money Analysis**
      
      Advanced Smart Money Concepts (SMC) analysis including institutional order flow,
      liquidity levels, order blocks, and smart money positioning indicators.
      
      **SMC Components:**
      - Order Blocks (OB) identification and validation
      - Fair Value Gaps (FVG) detection
      - Liquidity sweeps and stop hunts
      - Institutional order flow analysis
      - Change of Character (CHoCH) patterns
      
      **Accuracy:** 85%+ pattern recognition
      **Data Sources:** Multi-exchange order book analysis
      **Applications:** Professional trading, institutional positioning

  - name: Volume Analysis
    description: |
      **📦 Volume Profile & Order Flow Analysis**
      
      Advanced volume analysis including Cumulative Volume Delta (CVD), Volume Profile,
      Volume-Price Analysis (VPA), and order flow insights for professional trading.
      
      **Analysis Types:**
      - Cumulative Volume Delta (CVD) with divergence detection
      - Volume Profile with Point of Control (POC)
      - Volume-Price Analysis (VPA) patterns
      - Order flow imbalances and absorption
      - Volume momentum and accumulation/distribution
      
      **Precision:** Tick-level volume analysis
      **Divergence Detection:** AI-powered pattern recognition
      **Professional Features:** Institutional-grade volume analytics

  # ===== AI & MACHINE LEARNING =====
  - name: AI Signals - Standard
    description: |
      **🤖 AI-Powered Trading Signals (GPT-5)**
      
      Standard AI trading signals powered by GPT-5 with neural network pattern recognition,
      confidence scoring, and strategic trading recommendations.
      
      **AI Capabilities:**
      - GPT-5 powered market analysis
      - Pattern recognition and trend prediction
      - Confidence scoring (0-100%)
      - Risk analysis and position sizing
      - Entry/exit timing recommendations
      
      **Signal Types:** BUY, SELL, HOLD with strength indicators
      **Accuracy:** 70%+ win rate on backtested signals
      **Update Frequency:** Real-time signal generation

  - name: AI Signals - Enhanced
    description: |
      **🚀 Enhanced AI Engine with Neural Networks (Phase 2)**
      
      Advanced AI signal engine featuring 10 sophisticated patterns, 5-layer neural networks,
      self-learning capabilities, and institutional-grade pattern recognition.
      
      **Phase 2 Features:**
      - 50 input features with 5-layer neural architecture
      - 10 advanced patterns with 95%+ confidence detection
      - Self-learning pattern weight adjustments
      - Predictive institutional flow analysis
      - Neural network feature importance scoring
      
      **Patterns:** Institutional flow, breakout confirmation, momentum continuation
      **Learning System:** Auto-adjusting confidence based on trading performance
      **Precision:** Sub-second pattern detection with risk-reward optimization

  - name: AI Performance
    description: |
      **📊 AI Performance Tracking & Learning Analytics (Phase 2)**
      
      Comprehensive performance tracking for AI signals including execution recording,
      outcome analysis, and self-learning system metrics for continuous improvement.
      
      **Tracking Features:**
      - Signal execution recording with entry/exit tracking
      - P&L analysis and win rate calculations
      - Pattern performance analytics and confidence adjustments
      - Learning velocity and adaptation metrics
      - Trade outcome recording (stop loss, take profit, manual exits)
      
      **Analytics Depth:** Full trading lifecycle tracking
      **Learning System:** Real-time pattern confidence updates
      **Performance Metrics:** Sharpe ratio, max drawdown, risk-adjusted returns

  # ===== PREMIUM & ADVANCED =====
  - name: Premium Analytics
    description: |
      **💎 VIP8 Institutional-Grade Analytics**
      
      Premium institutional analytics with VIP8 tier features including ultra-premium analysis,
      negative maker fees simulation, and advanced institutional metrics.
      
      **VIP8 Features:**
      - Ultra-premium analysis with priority processing
      - Negative maker fees simulation for optimal execution
      - Advanced whale activity and institutional flow tracking
      - Priority data access and enhanced rate limits
      - Institutional-grade risk management tools
      
      **Access Level:** Premium subscribers only
      **Data Quality:** Institutional-grade accuracy
      **Processing Priority:** Sub-second response times

  - name: Enhanced Features
    description: |
      **⭐ Enhanced Analysis & Specialized Tools**
      
      Advanced analysis tools including enhanced SOL-specific features, confluence scoring,
      multi-timeframe analysis, and specialized trading tools for professional traders.
      
      **Enhanced Tools:**
      - SOL-specific enhanced open interest and funding analysis
      - Multi-indicator confluence scoring with trend strength
      - Live trading signals with precise entry/exit points
      - Enhanced volume profile with institutional positioning
      - Advanced Fibonacci analysis and market structure
      
      **Specialization:** SOL ecosystem focus with multi-asset support
      **Precision:** Professional-grade analysis tools
      **Integration:** TradingView compatible signals

  # ===== COINGLASS PREMIUM INTELLIGENCE =====
  - name: CoinGlass - Whale Analytics
    description: |
      **🐋 CoinGlass Whale Detection & Positioning Intelligence**
      
      Real-time whale alerts and institutional positioning data for large trades (>$1M notional value).
      Professional whale tracking with precise position sizing and unrealized P&L analysis.
      
      **Features:**
      - Real-time whale alerts across major exchanges
      - Institutional position sizing and tracking
      - Unrealized P&L analysis for whale positions
      - Exchange-specific whale activity filtering
      - Position side filtering (long/short analysis)
      
      **Data Sources:** Binance, OKX, Hyperliquid, Bybit, Deribit
      **Update Frequency:** Real-time whale detection
      **Threshold:** >$1M notional value positions

  - name: CoinGlass - ETF Intelligence  
    description: |
      **💰 Bitcoin ETF Flow Analysis & Institutional Intelligence**
      
      Comprehensive Bitcoin ETF flow tracking with historical analysis and institutional 
      inflow/outflow data. Complete coverage of all major Bitcoin ETFs with AUM and NAV metrics.
      
      **ETF Features:**
      - Historical Bitcoin ETF flow data with customizable periods
      - Complete Bitcoin ETF listings with AUM, NAV, and pricing
      - Institutional inflow/outflow analysis and trends
      - Total market AUM tracking across all Bitcoin ETFs
      - Net flow calculations and period summaries
      
      **Coverage:** All major Bitcoin ETFs (IBIT, FBTC, ARKB, etc.)
      **Historical Data:** Up to 365 days
      **Metrics:** AUM, NAV, pricing, flow metrics

  - name: CoinGlass - Market Intelligence
    description: |
      **📊 Advanced Market Sentiment & Asset Intelligence**
      
      Professional market sentiment analysis with fear & greed index, futures performance,
      and comprehensive cryptocurrency coverage with feature availability mapping.
      
      **Intelligence Features:**
      - Advanced market sentiment scoring with institutional indicators
      - Fear & greed index with futures performance metrics
      - Complete list of supported cryptocurrencies (150+ assets)
      - Feature availability mapping (funding rates, OI, liquidations)
      - Exchange coverage mapping for each asset
      
      **Sentiment Metrics:** Fear & greed index, institutional sentiment
      **Asset Coverage:** 150+ cryptocurrencies
      **Exchange Coverage:** Multi-exchange aggregation

  - name: CoinGlass - Technical Analysis
    description: |
      **📈 CoinGlass ATR Volatility & Real-Time Price Intelligence**
      
      Advanced Technical Range (ATR) volatility analysis with multiple timeframes and
      real-time ticker data including comprehensive market statistics and indicators.
      
      **Technical Features:**
      - ATR volatility calculations with customizable periods
      - Multiple timeframe analysis (5m to 1D)
      - Real-time ticker data with market statistics
      - Volatility level classification (low/medium/high)
      - Price change analysis and market cap tracking
      
      **Timeframes:** 5m, 15m, 30m, 1H, 4H, 1D
      **Volatility Analysis:** ATR percentage and classification
      **Real-time Data:** Price, volume, changes, market cap

  - name: CoinGlass - Advanced Analytics
    description: |
      **🎯 Liquidation Clusters, Orderbook Depth & Options Intelligence**
      
      Professional-grade liquidation heatmaps, deep spot orderbook analysis, and comprehensive 
      options open interest tracking with strike price distribution and expiration analysis.
      
      **Advanced Features:**
      - Liquidation cluster heatmaps with risk level analysis
      - Deep spot market orderbook with liquidity distribution
      - Options open interest with call/put ratios
      - Strike price distribution and expiration analysis
      - Market depth analysis with spread calculations
      
      **Liquidation Analysis:** Risk levels, volumes, price ranges
      **Orderbook Depth:** Configurable levels (5-100)
      **Options Coverage:** Call/put ratios, strike distribution

  # ===== SYSTEM & INFRASTRUCTURE =====
  - name: System Monitoring
    description: |
      **🔧 System Health & API Monitoring**
      
      System health endpoints, API status monitoring, performance metrics,
      and infrastructure monitoring for API reliability and performance tracking.
      
      **Monitoring Features:**
      - Real-time system health and uptime monitoring
      - API performance metrics and response times
      - Rate limit status and quota tracking
      - Memory usage and system resource monitoring
      - Error tracking and alert systems
      
      **Reliability:** 99.9% uptime SLA
      **Monitoring Frequency:** Real-time with sub-second updates
      **Use Cases:** API health checks, performance optimization, debugging

security:
  - ApiKeyAuth: ["read-only"]

paths:
  /api/pairs/supported:
    get:
      operationId: getSupportedTradingPairs
      summary: Get all supported trading pairs (Public Access)
      description: "🔓 Public endpoint returning 65+ supported cryptocurrency trading pairs. Includes major cryptos (BTC, ETH, SOL), DeFi tokens (UNI, AAVE), Layer 2 (MATIC, ARB), and meme coins (SHIB, PEPE). No authentication required."
      tags: [Market Data - Multi-Pair]
      security: []
      responses:
        '200':
          description: List of supported trading pairs
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      pairs:
                        type: array
                        items: { type: string }
                        example: ["BTC","ETH","SOL","ADA","AVAX","DOGE","UNI","MATIC","LTC","BCH","RENDER","BNB"]
                  timestamp: { type: string, format: date-time, example: "2025-09-06T14:30:00Z" }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ProblemResponse'

  /api/{pair}/complete:
    get:
      operationId: getCompleteAnalysis
      summary: Get comprehensive trading data for any supported pair
      tags: [Market Data - Multi-Pair]
      parameters:
        - name: pair
          in: path
          required: true
          description: Trading pair symbol - supports all 65+ pairs (BTC, ETH, SOL, ADA, etc.)
          schema:
            type: string
            pattern: '^[A-Za-z0-9]{2,10}$'
            enum: [BTC, ETH, SOL, ADA, DOT, MATIC, LTC, BCH, ETC, LINK, UNI, AAVE, ATOM, XRP, DOGE, SHIB, AVAX, FTM, NEAR, ALGO, MANA, SAND, AXS, ENJ, CRV, COMP, MKR, YFI, SUSHI, 1INCH, BAT, ZRX, KNC, LRC, REN, STORJ, GRT, FIL, AR, THETA, ICP, EGLD, HBAR, VET, CHZ, ENS, IMX, GMT, APE, GALA, LOOKS, MAGIC, OP, ARB, BLUR, SUI, PEPE, FLOKI, BONK, WIF, BOME, POPCAT, MEW, RENDER, BNB]
          example: BTC
      responses:
        '200':
          description: Complete trading data for the specified pair
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteAnalysisResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/{pair}/smc:
    get:
      operationId: getSmartMoneyConcepts
      summary: Get Smart Money Concepts analysis for any pair
      tags: [Smart Money Concepts]
      parameters:
        - name: pair
          in: path
          required: true
          description: Trading pair symbol (e.g., BTC, ETH, SOL)
          schema:
            type: string
            pattern: '^[A-Z0-9]{2,10}$'
          example: BTC
      responses:
        '200':
          description: Smart Money Concepts analysis
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMCAnalysisResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/{pair}/cvd:
    get:
      operationId: getCVDAnalysis
      summary: Get Cumulative Volume Delta analysis for any pair
      tags: [Volume Analysis]
      parameters:
        - name: pair
          in: path
          required: true
          description: Trading pair symbol (e.g., BTC, ETH, SOL)
          schema:
            type: string
            pattern: '^[A-Z0-9]{2,10}$'
          example: ETH
      responses:
        '200':
          description: CVD analysis with divergence patterns
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CVDAnalysisResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/{pair}/technical:
    get:
      operationId: getTechnicalIndicators
      summary: Get technical indicators analysis for any pair
      tags: [Technical Analysis]
      parameters:
        - name: pair
          in: path
          required: true
          description: Trading pair symbol (e.g., BTC, ETH, SOL)
          schema:
            type: string
            pattern: '^[A-Z0-9]{2,10}$'
          example: SOL
      responses:
        '200':
          description: Technical indicators analysis
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TechnicalAnalysisResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/{pair}/funding:
    get:
      operationId: getFundingRates
      summary: Get funding rates for any pair (Read-Only Access)
      description: "🔒 Protected endpoint for perpetual contract funding rates. Supports pagination and historical data. Requires read-only scope or higher. Rate limits: 100 req/min (Basic), 500 req/min (Premium)."
      tags: [Market Data - Derivatives]
      security:
        - ApiKeyAuth: ["read-only"]
      parameters:
        - name: pair
          in: path
          required: true
          description: Trading pair symbol (e.g., BTC, ETH, SOL)
          schema: { type: string, pattern: '^[A-Z0-9]{2,10}$' }
          example: BTC
        - name: start
          in: query
          description: RFC3339 start time (inclusive)
          required: false
          schema: { type: string, format: date-time }
        - name: end
          in: query
          description: RFC3339 end time (exclusive)
          required: false
          schema: { type: string, format: date-time }
        - name: limit
          in: query
          description: Page size (default 100, max 1000)
          required: false
          schema: { type: integer, minimum: 1, maximum: 1000, default: 100 }
        - name: cursor
          in: query
          description: Opaque cursor for pagination
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Funding rates data (current or historical)
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
            Link: { $ref: '#/components/headers/Link' }
            X-Total-Count: { $ref: '#/components/headers/X-Total-Count' }
            X-Page-Info: { $ref: '#/components/headers/X-Page-Info' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundingRateResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/{pair}/open-interest:
    get:
      operationId: getOpenInterest
      summary: Get open interest data for any pair
      description: Current open interest data and historical changes
      tags: [Market Data - Derivatives]
      parameters:
        - name: pair
          in: path
          required: true
          description: Trading pair symbol (e.g., BTC, ETH, SOL)
          schema: { type: string, pattern: '^[A-Z0-9]{2,10}$' }
          example: ETH
        - name: start
          in: query
          description: RFC3339 start time (inclusive)
          required: false
          schema: { type: string, format: date-time }
        - name: end
          in: query
          description: RFC3339 end time (exclusive)
          required: false
          schema: { type: string, format: date-time }
        - name: limit
          in: query
          description: Page size (default 100, max 1000)
          required: false
          schema: { type: integer, minimum: 1, maximum: 1000, default: 100 }
        - name: cursor
          in: query
          description: Opaque cursor for pagination
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Open interest data (current or historical)
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
            Link: { $ref: '#/components/headers/Link' }
            X-Total-Count: { $ref: '#/components/headers/X-Total-Count' }
            X-Page-Info: { $ref: '#/components/headers/X-Page-Info' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenInterestResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/ai/signal:
    get:
      operationId: getAISignal
      summary: Get AI-powered trading signal with GPT-5 analysis
      description: "🔒 AI trading signal with GPT-5 neural network pattern recognition. Provides confidence scoring, risk analysis, and strategic recommendations. Requires trading scope. 500 req/min (Premium), 100 req/min (Basic)."
      tags: [AI Signals - Standard]
      security:
        - ApiKeyAuth: ["trading"]
      responses:
        '200':
          description: AI-generated trading signal with confidence metrics
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      signal_id: { type: string, pattern: "^[a-z_]+_[0-9]+$", example: "ai_neutral_1757326331517" }
                      timestamp: { type: string, format: date-time, example: "2025-09-08T10:12:11.517Z" }
                      signal_type: { type: string, enum: ["buy", "sell", "hold"], example: "hold" }
                      direction: { type: string, enum: ["bullish", "bearish", "neutral"], example: "neutral" }
                      strength: { type: number, minimum: 0, maximum: 100, example: 0 }
                      confidence: { type: number, minimum: 0, maximum: 100, example: 50 }
                      source_patterns: { type: array, items: { type: string }, example: [] }
                      reasoning: { type: string, example: "Market conditions show mixed signals with low conviction" }
                      risk_analysis:
                        type: object
                        properties:
                          risk_level: { type: string, enum: ["low", "medium", "high"], example: "medium" }
                          recommendation: { type: string, example: "Wait for clearer directional signals" }
                  timestamp: { type: string, format: date-time, example: "2025-09-08T10:12:11.517Z" }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/ai/enhanced-signal:
    get:
      operationId: getEnhancedAISignal
      summary: Get Enhanced AI signal with 10 advanced patterns (Phase 2)
      description: "🔒 Enhanced AI signal with 10 advanced patterns, neural networks, and self-learning. Auto-updates confidence based on trading performance. Trading scope required. 500 req/min (Premium), 100 req/min (Basic)."
      tags: [AI Signals - Enhanced]
      security:
        - ApiKeyAuth: ["trading"]
      parameters:
        - name: symbol
          in: query
          description: Trading pair symbol (default SOL-USDT-SWAP)
          required: false
          schema:
            type: string
            example: "SOL-USDT-SWAP"
      responses:
        '200':
          description: Enhanced AI signal with advanced patterns and neural predictions
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      signal_id: { type: string, example: "enhanced_ai_1757468621438" }
                      symbol: { type: string, example: "SOL-USDT-SWAP" }
                      timestamp: { type: string, format: date-time, example: "2025-09-10T01:46:21.438Z" }
                      direction: { type: string, enum: ["long", "short", "neutral"], example: "neutral" }
                      strength: { type: number, minimum: 0, maximum: 100, example: 62 }
                      confidence: { type: number, minimum: 0, maximum: 100, example: 59 }
                      detected_patterns:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: string, example: "predictive_institutional_flow" }
                            name: { type: string, example: "Predictive Institutional Flow" }
                            confidence: { type: number, example: 0.95 }
                            historical_accuracy: { type: number, example: 0.78 }
                            risk_reward_ratio: { type: number, example: 2.5 }
                        example: [{"id": "predictive_institutional_flow", "name": "Predictive Institutional Flow", "confidence": 0.95}]
                      neural_prediction:
                        type: object
                        properties:
                          neural_confidence: { type: number, example: 0.48 }
                          neural_features: { type: array, items: { type: number }, example: [0.12, 0.45, 0.78] }
                          feature_importance: { type: array, items: { type: number }, example: [0.85, 0.72, 0.91] }
                      reasoning:
                        type: object
                        properties:
                          primary_factors: { type: array, items: { type: string }, example: ["Neural confidence: 48%", "Pattern confluence: 70.6%"] }
                          supporting_evidence: { type: array, items: { type: string }, example: ["10 patterns detected", "High institutional confidence"] }
                          risk_factors: { type: array, items: { type: string }, example: ["Mixed market signals", "Moderate volatility"] }
                          market_context: { type: string, example: "SOL trading in consolidation range with institutional interest" }
                      execution_details:
                        type: object
                        properties:
                          recommended_size: { type: number, example: 0.02 }
                          stop_loss: { type: number, example: 0.025 }
                          take_profit: { type: array, items: { type: number }, example: [0.05, 0.08] }
                          optimal_entry_window: { type: string, example: "2-4 hours" }
                      pattern_confluence: { type: number, example: 70.6 }
                      pattern_count: { type: number, example: 10 }
                  timestamp: { type: string, format: date-time, example: "2025-09-10T01:46:21.438Z" }
                example:
                  success: true
                  data:
                    signal_id: "enhanced_ai_1757468621438"
                    symbol: "SOL-USDT-SWAP"
                    timestamp: "2025-09-10T01:46:21.438Z"
                    direction: "neutral"
                    strength: 62
                    confidence: 59
                    detected_patterns:
                      - id: "predictive_institutional_flow"
                        name: "Predictive Institutional Flow"
                        confidence: 0.95
                        historical_accuracy: 0.78
                        risk_reward_ratio: 2.5
                    neural_prediction:
                      neural_confidence: 0.48
                      neural_features: [0.12, 0.45, 0.78]
                      feature_importance: [0.85, 0.72, 0.91]
                    reasoning:
                      primary_factors: ["Neural confidence: 48%", "Pattern confluence: 70.6%"]
                      supporting_evidence: ["10 patterns detected", "High institutional confidence"]
                      risk_factors: ["Mixed market signals", "Moderate volatility"]
                      market_context: "SOL trading in consolidation range with institutional interest"
                    execution_details:
                      recommended_size: 0.02
                      stop_loss: 0.025
                      take_profit: [0.05, 0.08]
                      optimal_entry_window: "2-4 hours"
                    pattern_confluence: 70.6
                    pattern_count: 10
                  timestamp: "2025-09-10T01:46:21.438Z"
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/ai/enhanced-performance:
    get:
      operationId: getEnhancedAIPerformance
      summary: Get Enhanced AI neural network performance metrics (Phase 2)
      description: |
        Enhanced AI performance analytics including neural network metrics,
        pattern performance, and learning capabilities overview.
      tags: [AI Signals - Enhanced]
      responses:
        '200':
          description: Enhanced AI performance and neural network metrics
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      neural_network:
                        type: object
                        properties:
                          input_features: { type: number, example: 50 }
                          hidden_layers: { type: number, example: 5 }
                          architecture: { type: string, example: "Dense layers with dropout regularization" }
                          prediction_accuracy: { type: number, example: 0.74 }
                      enhanced_patterns:
                        type: array
                        items:
                          type: object
                          properties:
                            pattern_id: { type: string, example: "predictive_institutional_flow" }
                            name: { type: string, example: "Predictive Institutional Flow" }
                            confidence: { type: number, example: 0.95 }
                            historical_accuracy: { type: number, example: 0.78 }
                            signals_generated: { type: number, example: 142 }
                        example: [{"pattern_id": "predictive_institutional_flow", "name": "Predictive Institutional Flow", "confidence": 0.95}]
                      learning_capabilities:
                        type: object
                        properties:
                          auto_pattern_updates: { type: boolean, example: true }
                          performance_tracking: { type: boolean, example: true }
                          confidence_adjustments: { type: boolean, example: true }
                          neural_adaptation: { type: boolean, example: true }
                      openai_integration:
                        type: object
                        properties:
                          gpt_model: { type: string, example: "GPT-5" }
                          enhanced_reasoning: { type: boolean, example: true }
                          status: { type: string, example: "active" }
                  timestamp: { type: string, format: date-time, example: "2025-09-10T01:46:21.438Z" }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/ai/tracking/execution:
    post:
      operationId: recordAITradeExecution
      summary: Record AI signal execution for performance tracking (Phase 2)
      description: "Record AI signal execution details for performance tracking. Enables self-learning system to update pattern confidence. Requires signal_id, entry_price, position_size. Trading scope required."
      tags: [AI Performance]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [signal_id, entry_price, position_size]
              properties:
                signal_id: { type: string, example: "enhanced_ai_1757468621438" }
                entry_price: { type: number, example: 215.50 }
                position_size: { type: number, example: 100 }
                stop_loss: { type: number, example: 210.25 }
                take_profit_1: { type: number, example: 225.30 }
                take_profit_2: { type: number, example: 235.50 }
                risk_amount: { type: number, example: 525.00 }
                execution_type: { type: string, enum: ["manual", "auto", "paper"], example: "manual" }
            examples:
              manual_execution:
                summary: Manual trade execution with stop loss and take profits
                description: Standard manual execution with risk management levels
                value:
                  signal_id: "enhanced_ai_1757468621438"
                  entry_price: 215.50
                  position_size: 100
                  stop_loss: 210.25
                  take_profit_1: 225.30
                  take_profit_2: 235.50
                  risk_amount: 525.00
                  execution_type: "manual"
              automated_execution:
                summary: Automated execution via trading bot
                description: Automated execution with higher position size
                value:
                  signal_id: "enhanced_ai_1757468621438"
                  entry_price: 218.75
                  position_size: 500
                  stop_loss: 212.00
                  take_profit_1: 230.00
                  take_profit_2: 240.50
                  risk_amount: 3375.00
                  execution_type: "auto"
              paper_trading:
                summary: Paper trading execution for testing
                description: Paper trading execution without real money
                value:
                  signal_id: "enhanced_ai_1757468621438"
                  entry_price: 219.20
                  position_size: 1000
                  stop_loss: 210.00
                  take_profit_1: 235.00
                  risk_amount: 9200.00
                  execution_type: "paper"
              minimal_execution:
                summary: Minimal execution with required fields only
                description: Basic execution with only mandatory fields
                value:
                  signal_id: "enhanced_ai_1757468621438"
                  entry_price: 216.80
                  position_size: 50
      responses:
        '200':
          description: Execution recorded successfully
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      execution_id: { type: string, pattern: "^exec_[0-9]+$", example: "exec_1757469123456" }
                      signal_id: { type: string, example: "enhanced_ai_1757468621438" }
                      status: { type: string, example: "recorded" }
                      execution_details:
                        type: object
                        properties:
                          entry_price: { type: number, example: 215.50 }
                          position_size: { type: number, example: 100 }
                          risk_amount: { type: number, example: 525.00 }
                          risk_reward_ratio: { type: number, example: 2.84 }
                          expected_profit: { type: number, example: 980.00 }
                      tracking_enabled: { type: boolean, example: true }
                      next_steps: 
                        type: array
                        items: { type: string }
                        example: ["Monitor position", "Record outcome when trade closes", "Pattern learning will update automatically"]
                  message: { type: string, example: "Trade execution recorded successfully. Performance tracking enabled." }
                  timestamp: { type: string, format: date-time, example: "2025-09-10T01:46:21.438Z" }
              examples:
                success_manual:
                  summary: Successful manual execution recording
                  description: Manual execution recorded with full tracking details
                  value:
                    success: true
                    data:
                      execution_id: "exec_1757469123456"
                      signal_id: "enhanced_ai_1757468621438"
                      status: "recorded"
                      execution_details:
                        entry_price: 215.50
                        position_size: 100
                        risk_amount: 525.00
                        risk_reward_ratio: 2.84
                        expected_profit: 980.00
                      tracking_enabled: true
                      next_steps: ["Monitor position", "Record outcome when trade closes", "Pattern learning will update automatically"]
                    message: "Trade execution recorded successfully. Performance tracking enabled."
                    timestamp: "2025-09-10T01:46:21.438Z"
                success_automated:
                  summary: Successful automated execution recording
                  description: Automated execution with larger position size
                  value:
                    success: true
                    data:
                      execution_id: "exec_1757469987654"
                      signal_id: "enhanced_ai_1757468621438"
                      status: "recorded"
                      execution_details:
                        entry_price: 218.75
                        position_size: 500
                        risk_amount: 3375.00
                        risk_reward_ratio: 3.12
                        expected_profit: 5625.00
                      tracking_enabled: true
                      next_steps: ["Automated monitoring active", "Stop-loss at 212.00", "Take-profit levels: 230.00, 240.50"]
                    message: "Automated execution recorded successfully. Bot monitoring enabled."
                    timestamp: "2025-09-10T01:47:15.221Z"
        '400':
          description: Bad Request - Invalid execution data
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                missing_required_field:
                  summary: Missing required field (signal_id)
                  description: Request body is missing the required signal_id field
                  value:
                    type: "https://guardiansofthegreentoken.com/problems/validation-error"
                    title: "Missing Required Field"
                    status: 400
                    detail: "Required field 'signal_id' is missing from request body."
                    instance: "/api/ai/tracking/execution"
                    code: "MISSING_REQUIRED_FIELD"
                    request_id: "req_1757469123456"
                    invalid_params:
                      - name: "signal_id"
                        reason: "This field is required for tracking trade execution"
                invalid_signal_id:
                  summary: Invalid signal ID format
                  description: Signal ID must match the expected pattern
                  value:
                    type: "https://guardiansofthegreentoken.com/problems/validation-error"
                    title: "Invalid Signal ID Format"
                    status: 400
                    detail: "Signal ID 'invalid_signal' does not match expected format '^enhanced_ai_[0-9]+$'."
                    instance: "/api/ai/tracking/execution"
                    code: "INVALID_SIGNAL_ID"
                    request_id: "req_1757469123457"
                    invalid_params:
                      - name: "signal_id"
                        reason: "Must be a valid AI signal ID (e.g., 'enhanced_ai_1757468621438')"
                invalid_price_range:
                  summary: Invalid price values
                  description: Entry price and stop loss values are unrealistic
                  value:
                    type: "https://guardiansofthegreentoken.com/problems/validation-error"
                    title: "Invalid Price Values"
                    status: 400
                    detail: "Entry price (1000000) is outside acceptable range for current market conditions."
                    instance: "/api/ai/tracking/execution"
                    code: "INVALID_PRICE_RANGE"
                    request_id: "req_1757469123458"
                    invalid_params:
                      - name: "entry_price"
                        reason: "Price must be within reasonable market range ($50 - $500 for SOL)"
                      - name: "stop_loss"
                        reason: "Stop loss must be below entry price for long positions"
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': 
          description: Signal not found
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                signal_not_found:
                  summary: AI signal not found
                  description: The specified signal ID does not exist or has expired
                  value:
                    type: "https://guardiansofthegreentoken.com/problems/resource-not-found"
                    title: "AI Signal Not Found"
                    status: 404
                    detail: "Signal ID 'enhanced_ai_1757468621999' not found or has expired."
                    instance: "/api/ai/tracking/execution"
                    code: "SIGNAL_NOT_FOUND"
                    request_id: "req_1757469123459"
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/ai/tracking/outcome:
    post:
      operationId: recordAITradeOutcome
      summary: Record AI signal trading outcome for learning (Phase 2)
      description: "Record AI signal trade outcome to trigger self-learning. Updates pattern confidence and neural network weights based on results. Requires signal_id, exit_price, exit_reason. Trading scope required."
      tags: [AI Performance]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [signal_id, exit_price, exit_reason]
              properties:
                signal_id: { type: string, example: "enhanced_ai_1757468621438" }
                exit_price: { type: number, example: 227.30 }
                exit_reason: { type: string, enum: ["stop_loss", "take_profit", "manual", "time_exit"], example: "take_profit" }
                exit_time: { type: string, format: date-time, example: "2025-09-10T02:15:30.000Z" }
                partial_close: { type: boolean, example: false }
                remaining_position: { type: number, example: 0 }
                notes: { type: string, example: "Reached take profit target after strong breakout" }
            examples:
              profitable_take_profit:
                summary: Profitable take profit exit
                description: Successful trade that hit the first take profit level
                value:
                  signal_id: "enhanced_ai_1757468621438"
                  exit_price: 227.30
                  exit_reason: "take_profit"
                  exit_time: "2025-09-10T02:15:30.000Z"
                  partial_close: false
                  remaining_position: 0
                  notes: "Reached take profit target after strong breakout"
              stop_loss_triggered:
                summary: Stop loss triggered
                description: Trade that hit stop loss due to market reversal
                value:
                  signal_id: "enhanced_ai_1757468621438"
                  exit_price: 210.25
                  exit_reason: "stop_loss"
                  exit_time: "2025-09-10T01:58:45.000Z"
                  partial_close: false
                  remaining_position: 0
                  notes: "Market reversed after false breakout, stop loss protected capital"
              manual_exit:
                summary: Manual exit by trader
                description: Trader manually closed position due to market conditions
                value:
                  signal_id: "enhanced_ai_1757468621438"
                  exit_price: 220.75
                  exit_reason: "manual"
                  exit_time: "2025-09-10T02:45:12.000Z"
                  partial_close: false
                  remaining_position: 0
                  notes: "Closed early due to unexpected news impact on market"
              partial_exit:
                summary: Partial position close
                description: Trader took partial profits and left position running
                value:
                  signal_id: "enhanced_ai_1757468621438"
                  exit_price: 225.30
                  exit_reason: "take_profit"
                  exit_time: "2025-09-10T02:10:15.000Z"
                  partial_close: true
                  remaining_position: 50
                  notes: "Partial close at first TP level, remaining 50 units running to second target"
              time_based_exit:
                summary: Time-based exit strategy
                description: Position closed after predetermined time period
                value:
                  signal_id: "enhanced_ai_1757468621438"
                  exit_price: 218.90
                  exit_reason: "time_exit"
                  exit_time: "2025-09-10T09:46:21.000Z"
                  partial_close: false
                  remaining_position: 0
                  notes: "8-hour time limit reached, market showed no clear direction"
      responses:
        '200':
          description: Outcome recorded and pattern performance updated
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      signal_id: { type: string, example: "enhanced_ai_1757468621438" }
                      pnl: { type: number, example: 1180 }
                      pnl_percentage: { type: number, example: 5.47 }
                      was_successful: { type: boolean, example: true }
                      duration_minutes: { type: number, example: 29 }
                      patterns_updated: { type: number, example: 10 }
                      learning_impact:
                        type: object
                        properties:
                          confidence_adjustments: { type: array, items: { type: object }, example: [{"pattern": "predictive_institutional_flow", "old_confidence": 0.95, "new_confidence": 0.96}] }
                          neural_weight_updates: { type: boolean, example: true }
                          performance_tier: { type: string, enum: ["excellent", "good", "average", "poor"], example: "excellent" }
                      trade_analysis:
                        type: object
                        properties:
                          entry_price: { type: number, example: 215.50 }
                          exit_price: { type: number, example: 227.30 }
                          max_favorable_excursion: { type: number, example: 229.80 }
                          max_adverse_excursion: { type: number, example: 214.20 }
                          risk_reward_realized: { type: number, example: 2.24 }
                  message: { type: string, example: "Outcome recorded and pattern performance updated" }
                  timestamp: { type: string, format: date-time, example: "2025-09-10T02:15:30.000Z" }
              examples:
                successful_take_profit:
                  summary: Successful take profit outcome
                  description: Profitable trade that enhanced pattern confidence
                  value:
                    success: true
                    data:
                      signal_id: "enhanced_ai_1757468621438"
                      pnl: 1180
                      pnl_percentage: 5.47
                      was_successful: true
                      duration_minutes: 29
                      patterns_updated: 10
                      learning_impact:
                        confidence_adjustments:
                          - pattern: "predictive_institutional_flow"
                            old_confidence: 0.95
                            new_confidence: 0.96
                          - pattern: "volume_breakout_confirmation"
                            old_confidence: 0.82
                            new_confidence: 0.84
                        neural_weight_updates: true
                        performance_tier: "excellent"
                      trade_analysis:
                        entry_price: 215.50
                        exit_price: 227.30
                        max_favorable_excursion: 229.80
                        max_adverse_excursion: 214.20
                        risk_reward_realized: 2.24
                    message: "Profitable outcome recorded. Pattern confidence increased across 10 patterns."
                    timestamp: "2025-09-10T02:15:30.000Z"
                stop_loss_outcome:
                  summary: Stop loss outcome with learning update
                  description: Loss that triggered pattern confidence adjustments
                  value:
                    success: true
                    data:
                      signal_id: "enhanced_ai_1757468621438"
                      pnl: -525
                      pnl_percentage: -2.44
                      was_successful: false
                      duration_minutes: 17
                      patterns_updated: 8
                      learning_impact:
                        confidence_adjustments:
                          - pattern: "false_breakout_detection"
                            old_confidence: 0.78
                            new_confidence: 0.75
                          - pattern: "support_resistance_levels"
                            old_confidence: 0.89
                            new_confidence: 0.87
                        neural_weight_updates: true
                        performance_tier: "poor"
                      trade_analysis:
                        entry_price: 215.50
                        exit_price: 210.25
                        max_favorable_excursion: 216.80
                        max_adverse_excursion: 210.00
                        risk_reward_realized: -1.0
                    message: "Stop loss outcome recorded. Pattern confidence adjusted based on market conditions."
                    timestamp: "2025-09-10T01:58:45.000Z"
                partial_close_outcome:
                  summary: Partial close with ongoing position
                  description: Partial profit taking with position still active
                  value:
                    success: true
                    data:
                      signal_id: "enhanced_ai_1757468621438"
                      pnl: 495
                      pnl_percentage: 4.59
                      was_successful: true
                      duration_minutes: 23
                      patterns_updated: 6
                      learning_impact:
                        confidence_adjustments:
                          - pattern: "momentum_continuation"
                            old_confidence: 0.85
                            new_confidence: 0.87
                        neural_weight_updates: true
                        performance_tier: "good"
                      trade_analysis:
                        entry_price: 215.50
                        exit_price: 225.30
                        max_favorable_excursion: 226.50
                        max_adverse_excursion: 214.75
                        risk_reward_realized: 1.87
                    message: "Partial outcome recorded. Remaining position continues tracking for full learning cycle."
                    timestamp: "2025-09-10T02:10:15.000Z"
        '400':
          description: Bad Request - Invalid outcome data
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                missing_exit_reason:
                  summary: Missing exit reason
                  description: Required field exit_reason is missing
                  value:
                    type: "https://guardiansofthegreentoken.com/problems/validation-error"
                    title: "Missing Required Field"
                    status: 400
                    detail: "Required field 'exit_reason' is missing from request body."
                    instance: "/api/ai/tracking/outcome"
                    code: "MISSING_REQUIRED_FIELD"
                    request_id: "req_1757469876543"
                    invalid_params:
                      - name: "exit_reason"
                        reason: "Must be one of: stop_loss, take_profit, manual, time_exit"
                invalid_exit_reason:
                  summary: Invalid exit reason value
                  description: Exit reason must be from allowed enum values
                  value:
                    type: "https://guardiansofthegreentoken.com/problems/validation-error"
                    title: "Invalid Exit Reason"
                    status: 400
                    detail: "Exit reason 'invalid_reason' is not allowed. Must be one of: stop_loss, take_profit, manual, time_exit."
                    instance: "/api/ai/tracking/outcome"
                    code: "INVALID_EXIT_REASON"
                    request_id: "req_1757469876544"
                    invalid_params:
                      - name: "exit_reason"
                        reason: "Must be one of: stop_loss, take_profit, manual, time_exit"
                invalid_partial_close:
                  summary: Invalid partial close configuration
                  description: Partial close requires remaining position data
                  value:
                    type: "https://guardiansofthegreentoken.com/problems/validation-error"
                    title: "Invalid Partial Close Data"
                    status: 400
                    detail: "When partial_close is true, remaining_position must be greater than 0."
                    instance: "/api/ai/tracking/outcome"
                    code: "INVALID_PARTIAL_CLOSE"
                    request_id: "req_1757469876545"
                    invalid_params:
                      - name: "remaining_position"
                        reason: "Must be greater than 0 when partial_close is true"
        '404':
          description: Signal execution not found
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                execution_not_found:
                  summary: Signal execution not found
                  description: No execution record found for the signal ID
                  value:
                    type: "https://guardiansofthegreentoken.com/problems/resource-not-found"
                    title: "Signal Execution Not Found"
                    status: 404
                    detail: "No execution record found for signal ID 'enhanced_ai_1757468621999'. Cannot record outcome without execution record."
                    instance: "/api/ai/tracking/outcome"
                    code: "EXECUTION_NOT_FOUND"
                    request_id: "req_1757469876546"
                already_recorded:
                  summary: Outcome already recorded
                  description: Outcome has already been recorded for this signal
                  value:
                    type: "https://guardiansofthegreentoken.com/problems/resource-conflict"
                    title: "Outcome Already Recorded"
                    status: 409
                    detail: "Outcome for signal ID 'enhanced_ai_1757468621438' has already been recorded on 2025-09-10T01:45:30.000Z."
                    instance: "/api/ai/tracking/outcome"
                    code: "OUTCOME_ALREADY_RECORDED"
                    request_id: "req_1757469876547"
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/ai/tracking/overall-performance:
    get:
      operationId: getAIOverallPerformance
      summary: Get AI system overall performance analytics (Phase 2)
      description: |
        Get comprehensive performance analytics for the AI signal system
        including win rates, P&L metrics, and pattern performance overview.
      tags: [AI Performance]
      responses:
        '200':
          description: AI system performance analytics
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      overall_stats:
                        type: object
                        properties:
                          total_signals: { type: number, example: 145 }
                          executed_signals: { type: number, example: 98 }
                          completed_trades: { type: number, example: 87 }
                          win_rate: { type: number, example: 0.712 }
                          total_pnl: { type: number, example: 15420.50 }
                          avg_pnl_per_trade: { type: number, example: 177.25 }
                          best_trade: { type: number, example: 2850.00 }
                          worst_trade: { type: number, example: -1250.00 }
                      pattern_performance:
                        type: array
                        items:
                          type: object
                          properties:
                            pattern_name: { type: string, example: "Predictive Institutional Flow" }
                            win_rate: { type: number, example: 0.78 }
                            total_signals: { type: number, example: 23 }
                            avg_confidence: { type: number, example: 0.89 }
                            total_pnl: { type: number, example: 4250.50 }
                            adaptation_factor: { type: number, example: 1.15 }
                        example: [{"pattern_name": "Predictive Institutional Flow", "win_rate": 0.78, "total_signals": 23}]
                      learning_metrics:
                        type: object
                        properties:
                          confidence_adjustments: { type: number, example: 34 }
                          patterns_improved: { type: number, example: 8 }
                          patterns_demoted: { type: number, example: 2 }
                          learning_velocity: { type: number, example: 0.15 }
                  timestamp: { type: string, format: date-time, example: "2025-09-10T02:15:30.000Z" }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/premium/institutional-analytics:
    get:
      operationId: getPremiumInstitutionalAnalytics
      summary: Get VIP8 institutional-grade analytics
      description: "🔐 VIP8 institutional analytics with ultra premium analysis, negative maker fees simulation, and advanced metrics. Premium scope required. 2000 req/min (Enterprise only). Priority processing."
      tags: [Premium Analytics]
      security:
        - ApiKeyAuth: ["premium"]
      responses:
        '200':
          description: VIP8 institutional analytics data
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      analyticsLevel: { type: string, example: "vip8" }
                      features: 
                        type: array
                        items: { type: string }
                        example: ["ultra_premium", "negative_maker_fees", "priority_processing", "advanced_metrics"]
                      analytics:
                        type: object
                        properties:
                          totalBidVolume: { type: number, example: 185000 }
                          totalAskVolume: { type: number, example: 142000 }
                          institutionalFlowScore: { type: number, example: 78 }
                          whaleActivityIndex: { type: number, example: 85 }
                  timestamp: { type: string, format: date-time, example: "2025-09-08T10:12:11.517Z" }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }




  /api/sol/funding/enhanced:
    get:
      operationId: getSOLEnhancedFunding
      summary: Get SOL enhanced funding rate analysis
      description: Enhanced funding rate analysis with premium calculations and predictions
      tags: [Market Data - Derivatives]
      responses:
        '200':
          description: Enhanced funding rate analysis
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      current:
                        type: object
                        properties:
                          instId: { type: string, example: "SOL-USDT-SWAP" }
                          fundingRate: { type: number, example: 0.0001 }
                          premium: { type: number, example: -0.000235660083895 }
                          nextFundingTime: { type: string, format: date-time, example: "2025-09-09T00:00:00.000Z" }
                          fundingTime: { type: string, format: date-time, example: "2025-09-08T16:00:00.000Z" }
                      analysis:
                        type: object
                        properties:
                          sentiment: { type: string, enum: ["bullish", "bearish", "neutral"], example: "neutral" }
                          historicalContext: { type: string, example: "Within normal range" }
                          prediction: { type: string, example: "Stable funding rates expected" }
                  timestamp: { type: string, format: date-time, example: "2025-09-08T10:12:11.517Z" }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/sol/volume-profile:
    get:
      operationId: getSOLVolumeProfile
      summary: Get SOL volume profile analysis
      description: Volume profile analysis with POC, HVN/LVN levels, and institutional significance
      tags: [Enhanced Features]
      responses:
        '200':
          description: Volume profile analysis with key levels
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      poc: { type: string, example: "203.43" }
                      hvnLevels:
                        type: array
                        items:
                          type: object
                          properties:
                            price: { type: string, example: "203.43" }
                            volume: { type: string, example: "60731.91" }
                            percentage: { type: string, example: "0.20" }
                      lvnLevels:
                        type: array
                        items:
                          type: object
                          properties:
                            price: { type: string, example: "195.20" }
                            volume: { type: string, example: "1250.45" }
                            percentage: { type: string, example: "0.004" }
                      significance:
                        type: object
                        properties:
                          pocStrength: { type: string, enum: ["weak", "moderate", "strong"], example: "strong" }
                          institutionalLevels: { type: array, items: { type: string }, example: ["203.43", "208.91"] }
                  timestamp: { type: string, format: date-time, example: "2025-09-08T10:12:11.517Z" }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/sol/fibonacci:
    get:
      operationId: getSOLFibonacci
      summary: Get SOL Fibonacci retracement analysis
      description: Multi-level Fibonacci retracement and extension analysis with trend phase detection
      tags: [Enhanced Features]
      responses:
        '200':
          description: Fibonacci analysis with key levels and trend phases
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      timeframe: { type: string, example: "1H" }
                      trend:
                        type: object
                        properties:
                          direction: { type: string, enum: ["bullish", "bearish", "neutral"], example: "bearish" }
                          strength: { type: string, enum: ["weak", "moderate", "strong"], example: "strong" }
                          phase: { type: string, enum: ["impulse", "correction", "consolidation"], example: "impulse" }
                      swingPoints:
                        type: object
                        properties:
                          current:
                            type: object
                            properties:
                              high:
                                type: object
                                properties:
                                  price: { type: number, example: 217.25 }
                                  timestamp: { type: string, format: date-time, example: "2025-09-08T09:00:00Z" }
                              low:
                                type: object
                                properties:
                                  price: { type: number, example: 203.15 }
                                  timestamp: { type: string, format: date-time, example: "2025-09-08T11:30:00Z" }
                      fibonacciLevels:
                        type: array
                        items:
                          type: object
                          properties:
                            level: { type: string, example: "0.618" }
                            price: { type: number, example: 208.43 }
                            significance: { type: string, enum: ["low", "medium", "high"], example: "high" }
                  timestamp: { type: string, format: date-time, example: "2025-09-08T10:12:11.517Z" }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/sol/order-flow:
    get:
      operationId: getSOLOrderFlow
      summary: Get SOL real-time order flow analysis
      description: Professional tape reading analysis with institutional flow classification
      tags: [Enhanced Features]
      responses:
        '200':
          description: Real-time order flow analysis
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      timeframe: { type: string, example: "1H" }
                      currentImbalance:
                        type: object
                        properties:
                          timestamp: { type: string, format: date-time, example: "2025-09-08T10:12:42.506Z" }
                          bidSize: { type: ["number", "null"], example: null }
                          askSize: { type: ["number", "null"], example: null }
                          imbalanceRatio: { type: number, example: 0 }
                          direction: { type: string, enum: ["buy", "sell", "neutral"], example: "neutral" }
                      flowAnalysis:
                        type: object
                        properties:
                          institutionalFlow: { type: string, enum: ["accumulation", "distribution", "neutral"], example: "neutral" }
                          retailSentiment: { type: string, enum: ["bullish", "bearish", "neutral"], example: "neutral" }
                          volumeProfile: { type: string, enum: ["aggressive", "passive", "balanced"], example: "balanced" }
                  timestamp: { type: string, format: date-time, example: "2025-09-08T10:12:11.517Z" }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /api/sol/liquidation-heatmap:
    get:
      operationId: getSOLLiquidationHeatmap
      summary: Get SOL liquidation cluster analysis
      description: Liquidation heatmap with risk zones and cascade potential analysis
      tags: [Enhanced Features]
      responses:
        '200':
          description: Liquidation cluster analysis and risk assessment
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      currentPrice: { type: number, example: 211.89 }
                      overallRiskScore: { type: number, minimum: 0, maximum: 100, example: 18 }
                      immediateRisk:
                        type: object
                        properties:
                          upside: { type: array, items: { type: object }, example: [] }
                          downside: { type: array, items: { type: object }, example: [] }
                          netRisk: { type: number, example: 0 }
                          criticalLevels: { type: array, items: { type: string }, example: [] }
                          significantLevels: { type: array, items: { type: string }, example: [] }
                      riskAssessment:
                        type: object
                        properties:
                          cascadeRisk: { type: string, enum: ["low", "medium", "high"], example: "low" }
                          liquidityDepth: { type: string, enum: ["shallow", "moderate", "deep"], example: "moderate" }
                          volatilityExpectation: { type: string, enum: ["low", "medium", "high"], example: "medium" }
                  timestamp: { type: string, format: date-time, example: "2025-09-08T10:12:11.517Z" }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/ProblemResponse' }


  /health:
    get:
      operationId: getHealthStatus
      summary: Get system health status (Public Access)
      description: "🔓 Public system health check endpoint. Real-time API services, database connectivity, and system health status. Used for monitoring, uptime checks, and load balancer health validation. No authentication required."
      tags: [System Monitoring]
      security: []
      responses:
        '200':
          description: System health status
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: ["operational", "degraded", "down"]
                        example: "operational"
                      timestamp:
                        type: string
                        format: date-time
                        example: "2025-09-06T14:30:00Z"
                      services:
                        type: object
                        properties:
                          okx:
                            type: string
                            enum: ["connected", "disconnected", "error"]
                            example: "connected"
                          api:
                            type: string
                            enum: ["operational", "degraded", "down"]
                            example: "operational"
        '500': { $ref: '#/components/responses/ProblemResponse' }


  # Removed getCoinGlassWhalePositions - use unifiedAdvancedEndpoint
      summary: Get whale positioning data by exchange (Premium Access)
      description: "🐋 Current whale positions (>$1M notional value) with unrealized P&L analysis, position sizing, and institutional flow tracking across major exchanges. Professional whale positioning intelligence."
      tags: [CoinGlass - Whale Analytics]
      parameters:
        - name: symbol
          in: query
          description: Trading symbol to filter positions (e.g., BTC, ETH, SOL)
          required: false
          schema:
            type: string
            example: "BTC"
        - name: exchange
          in: query
          description: Exchange to filter positions (binance, okx, hyperliquid, bybit, deribit)
          required: false
          schema:
            type: string
            enum: ["binance", "okx", "hyperliquid", "bybit", "deribit"]
            example: "hyperliquid"
        - name: side
          in: query
          description: Position side to filter (long or short positions)
          required: false
          schema:
            type: string
            enum: ["long", "short"]
            example: "long"
      responses:
        '200':
          description: Current whale positions data
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        symbol: { type: string, example: "BTC" }
                        exchange: { type: string, example: "hyperliquid" }
                        side: { type: string, enum: ["long", "short"], example: "long" }
                        size: { type: string, example: "25.7834", description: "Position size in base currency" }
                        notional_usd: { type: string, example: "1456789.23", description: "Position notional value in USD" }
                        entry_price: { type: string, example: "56523.45" }
                        current_price: { type: string, example: "58392.45" }
                        unrealized_pnl_usd: { type: string, example: "48567.89", description: "Unrealized P&L in USD" }
                        unrealized_pnl_pct: { type: string, example: "3.34", description: "Unrealized P&L percentage" }
                        margin_ratio: { type: string, example: "0.15", description: "Position margin ratio" }
                        liquidation_price: { type: string, example: "45234.67" }
                        timestamp: { type: string, format: date-time }
                        position_id: { type: string, example: "WP-BTC-HYP-2025091500001" }
                  total: { type: integer, example: 8, description: "Total number of whale positions" }
                  total_notional: { type: string, example: "45678901.23", description: "Total notional value of all positions in USD" }
                  timestamp: { type: string, format: date-time }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '503':
          description: CoinGlass service temporarily unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "CoinGlass service unavailable" }
                  timestamp: { type: string, format: date-time }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  # Removed getCoinGlassETFFlows - use unifiedAdvancedEndpoint
  # ===== COINGLASS ETF INTELLIGENCE =====
  # Removed getCoinGlassETFFlows - use unifiedAdvancedEndpoint
      summary: Get Bitcoin ETF flow data with historical analysis (Premium Access)
      description: "💰 Historical Bitcoin ETF flow tracking with institutional inflows/outflows analysis. Comprehensive ETF flow data with customizable time periods, net flow calculations, and institutional investment trend analysis."
      tags: [CoinGlass - ETF Intelligence]
      parameters:
        - name: days
          in: query
          description: Number of days of historical ETF flow data to retrieve (1-365 days)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
            example: 30
        - name: asset
          in: query
          description: Asset to filter ETF flows (currently supports BTC, more assets coming soon)
          required: false
          schema:
            type: string
            default: "BTC"
            example: "BTC"
      responses:
        '200':
          description: Bitcoin ETF flow data with historical analysis
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        date: { type: string, format: date, example: "2025-09-15" }
                        etf_ticker: { type: string, example: "IBIT", description: "ETF ticker symbol" }
                        etf_name: { type: string, example: "iShares Bitcoin Trust", description: "Full ETF name" }
                        inflow: { type: string, example: "156789012.34", description: "Daily inflow in USD" }
                        outflow: { type: string, example: "-45678901.23", description: "Daily outflow in USD" }
                        net_flow: { type: string, example: "111110111.11", description: "Net flow (inflow - outflow)" }
                        aum: { type: string, example: "23456789012.45", description: "Assets Under Management" }
                        nav_per_share: { type: string, example: "58.34", description: "Net Asset Value per share" }
                        shares_outstanding: { type: string, example: "456789012", description: "Total shares outstanding" }
                        premium_discount: { type: string, example: "0.02", description: "Premium/discount to NAV %" }
                  summary:
                    type: object
                    properties:
                      total_inflow: { type: string, example: "2847392847.50", description: "Total inflows for the period" }
                      total_outflow: { type: string, example: "-294739284.75", description: "Total outflows for the period" }
                      net_flow: { type: string, example: "2552653562.75", description: "Net flow for the period" }
                      period_days: { type: integer, example: 30, description: "Analysis period in days" }
                      avg_daily_flow: { type: string, example: "85088452.09", description: "Average daily net flow" }
                  timestamp: { type: string, format: date-time }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '503':
          description: CoinGlass ETF service temporarily unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "CoinGlass ETF service unavailable" }
                  timestamp: { type: string, format: date-time }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /py/advanced/etf/bitcoin:
    get:
      operationId: getCoinGlassBitcoinETFs
      summary: Get Bitcoin ETF specific data and listings (Premium Access)
      description: "💰 Comprehensive Bitcoin ETF data including AUM, NAV, pricing, and flow metrics for all major Bitcoin ETFs. Complete market overview with total market statistics and institutional investment tracking."
      tags: [CoinGlass - ETF Intelligence]
      responses:
        '200':
          description: Complete Bitcoin ETF market data
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        ticker: { type: string, example: "IBIT", description: "ETF ticker symbol" }
                        name: { type: string, example: "iShares Bitcoin Trust", description: "Full ETF name" }
                        issuer: { type: string, example: "BlackRock", description: "ETF issuer" }
                        launch_date: { type: string, format: date, example: "2024-01-11" }
                        aum: { type: string, example: "23456789012.45", description: "Assets Under Management in USD" }
                        nav_per_share: { type: string, example: "58.34", description: "Net Asset Value per share" }
                        market_price: { type: string, example: "58.36", description: "Current market price" }
                        shares_outstanding: { type: string, example: "456789012", description: "Total shares outstanding" }
                        daily_volume: { type: string, example: "876543210.12", description: "Average daily trading volume" }
                        expense_ratio: { type: string, example: "0.25", description: "Annual expense ratio %" }
                        premium_discount: { type: string, example: "0.03", description: "Premium/discount to NAV %" }
                        ytd_performance: { type: string, example: "45.67", description: "Year-to-date performance %" }
                        net_inflows_ytd: { type: string, example: "8567890123.45", description: "YTD net inflows" }
                        bitcoin_holdings: { type: string, example: "425678.9012", description: "Bitcoin holdings in BTC" }
                  total_aum: { type: string, example: "67849203847.23", description: "Total AUM across all Bitcoin ETFs" }
                  total_etfs: { type: integer, example: 11, description: "Total number of Bitcoin ETFs" }
                  market_leaders:
                    type: array
                    items:
                      type: object
                      properties:
                        rank: { type: integer, example: 1 }
                        ticker: { type: string, example: "IBIT" }
                        aum: { type: string, example: "23456789012.45" }
                        market_share_pct: { type: string, example: "34.56" }
                  timestamp: { type: string, format: date-time }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '503':
          description: CoinGlass ETF service temporarily unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "CoinGlass ETF service unavailable" }
                  timestamp: { type: string, format: date-time }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  # ===== COINGLASS MARKET INTELLIGENCE =====
  /py/advanced/market/sentiment:
    get:
      operationId: getCoinGlassMarketSentiment
      summary: Get advanced market sentiment scoring (Premium Access)
      description: "📊 Advanced market sentiment analysis including fear & greed index, futures performance metrics, institutional sentiment indicators, and comprehensive market mood assessment for professional trading decisions."
      tags: [CoinGlass - Market Intelligence]
      responses:
        '200':
          description: Comprehensive market sentiment data
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      fear_greed_index:
                        type: object
                        properties:
                          value: { type: integer, example: 72, description: "Fear & Greed Index value (0-100)" }
                          text: { type: string, example: "Greed", description: "Sentiment classification" }
                          classification: { type: string, enum: ["Extreme Fear", "Fear", "Neutral", "Greed", "Extreme Greed"], example: "Greed" }
                      institutional_sentiment:
                        type: object
                        properties:
                          score: { type: integer, example: 65, description: "Institutional sentiment score (0-100)" }
                          trend: { type: string, enum: ["bullish", "bearish", "neutral"], example: "bullish" }
                          confidence: { type: string, example: "high", description: "Signal confidence level" }
                      futures_performance:
                        type: object
                        properties:
                          btc_futures_basis: { type: string, example: "0.25", description: "BTC futures basis %" }
                          funding_rates_avg: { type: string, example: "0.0001", description: "Average funding rates" }
                          open_interest_change_24h: { type: string, example: "5.67", description: "OI change 24h %" }
                          long_short_ratio: { type: string, example: "1.35", description: "Long/Short ratio" }
                      market_indicators:
                        type: object
                        properties:
                          volatility_index: { type: string, example: "45.23", description: "Market volatility index" }
                          momentum_score: { type: integer, example: 78, description: "Market momentum (0-100)" }
                          trend_strength: { type: string, enum: ["weak", "moderate", "strong"], example: "strong" }
                          support_resistance_levels:
                            type: array
                            items:
                              type: object
                              properties:
                                level: { type: string, example: "57500.00" }
                                type: { type: string, enum: ["support", "resistance"] }
                                strength: { type: string, enum: ["weak", "moderate", "strong"] }
                      overall_sentiment:
                        type: object
                        properties:
                          score: { type: integer, example: 68, description: "Overall sentiment score (0-100)" }
                          recommendation: { type: string, enum: ["strong_sell", "sell", "hold", "buy", "strong_buy"], example: "buy" }
                          risk_level: { type: string, enum: ["low", "medium", "high"], example: "medium" }
                  timestamp: { type: string, format: date-time }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '503':
          description: CoinGlass market sentiment service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "CoinGlass sentiment service unavailable" }
                  timestamp: { type: string, format: date-time }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /py/advanced/market/coins:
    get:
      operationId: getCoinGlassSupportedCoins
      summary: Get list of supported cryptocurrencies (Premium Access)
      description: "📊 Complete list of cryptocurrencies supported by CoinGlass (150+ assets) with feature availability mapping, exchange coverage, and comprehensive asset intelligence for institutional analysis."
      tags: [CoinGlass - Market Intelligence]
      responses:
        '200':
          description: Comprehensive supported cryptocurrencies data
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        symbol: { type: string, example: "BTC", description: "Cryptocurrency symbol" }
                        name: { type: string, example: "Bitcoin", description: "Full cryptocurrency name" }
                        market_cap_rank: { type: integer, example: 1, description: "Market cap ranking" }
                        supported_features:
                          type: array
                          items: { type: string }
                          example: ["funding_rate", "open_interest", "liquidation", "whale_alerts", "options"]
                          description: "Available CoinGlass features for this asset"
                        exchanges:
                          type: array
                          items: { type: string }
                          example: ["binance", "okx", "bybit", "hyperliquid", "deribit"]
                          description: "Exchanges supporting this asset"
                        categories:
                          type: array
                          items: { type: string }
                          example: ["cryptocurrency", "store-of-value", "digital-currency"]
                          description: "Asset categories"
                        market_data:
                          type: object
                          properties:
                            current_price: { type: string, example: "58392.45" }
                            market_cap: { type: string, example: "1145678901234.56" }
                            total_volume_24h: { type: string, example: "23456789012.34" }
                            price_change_24h_pct: { type: string, example: "2.34" }
                        derivatives_support:
                          type: object
                          properties:
                            futures: { type: boolean, example: true }
                            perpetuals: { type: boolean, example: true }
                            options: { type: boolean, example: true }
                            lending: { type: boolean, example: true }
                        data_coverage:
                          type: object
                          properties:
                            historical_data_days: { type: integer, example: 2190, description: "Days of historical data" }
                            real_time_data: { type: boolean, example: true }
                            whale_tracking: { type: boolean, example: true }
                            institutional_flow: { type: boolean, example: true }
                  total: { type: integer, example: 150, description: "Total supported cryptocurrencies" }
                  categories:
                    type: object
                    properties:
                      major_coins: { type: integer, example: 10 }
                      defi_tokens: { type: integer, example: 45 }
                      layer2_tokens: { type: integer, example: 25 }
                      meme_coins: { type: integer, example: 20 }
                      other: { type: integer, example: 50 }
                  exchanges_covered: 
                    type: array
                    items: { type: string }
                    example: ["binance", "okx", "bybit", "hyperliquid", "deribit", "coinbase", "kraken"]
                  timestamp: { type: string, format: date-time }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '503':
          description: CoinGlass supported coins service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "CoinGlass coins service unavailable" }
                  timestamp: { type: string, format: date-time }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  # ===== COINGLASS TECHNICAL ANALYSIS =====
  /py/advanced/technical/atr:
    get:
      operationId: getCoinGlassATRData
      summary: Get ATR volatility data for symbols (Premium Access)
      description: "📈 Average True Range (ATR) volatility analysis with multiple timeframes and customizable periods. Professional volatility classification and real-time market condition assessment for risk management."
      tags: [CoinGlass - Technical Analysis]
      parameters:
        - name: symbol
          in: query
          description: Trading symbol for ATR calculation (e.g., BTC, ETH, SOL)
          required: true
          schema:
            type: string
            example: "BTC"
        - name: timeframe
          in: query
          description: Timeframe for ATR volatility calculation
          required: false
          schema:
            type: string
            enum: ["5m", "15m", "30m", "1H", "4H", "1D"]
            default: "1H"
            example: "1H"
        - name: period
          in: query
          description: ATR calculation period (1-200 periods)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 14
            example: 14
      responses:
        '200':
          description: ATR volatility data with market classification
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      symbol: { type: string, example: "BTC", description: "Trading symbol" }
                      timeframe: { type: string, example: "1H", description: "Analysis timeframe" }
                      period: { type: integer, example: 14, description: "ATR calculation period" }
                      atr: { type: string, example: "1247.83", description: "Average True Range value" }
                      atr_percentage: { type: string, example: "2.14", description: "ATR as percentage of price" }
                      volatility_level: { type: string, enum: ["low", "medium", "high"], example: "medium", description: "Volatility classification" }
                      price: { type: string, example: "58392.45", description: "Current asset price" }
                      historical_context:
                        type: object
                        properties:
                          atr_percentile_30d: { type: string, example: "67.8", description: "ATR percentile vs 30-day history" }
                          volatility_trend: { type: string, enum: ["increasing", "decreasing", "stable"], example: "increasing" }
                          risk_assessment: { type: string, enum: ["low_risk", "moderate_risk", "high_risk"], example: "moderate_risk" }
                  timestamp: { type: string, format: date-time }
        '400':
          description: Invalid symbol or parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Invalid symbol or parameters" }
                  timestamp: { type: string, format: date-time }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '503':
          description: CoinGlass technical service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "CoinGlass technical service unavailable" }
                  timestamp: { type: string, format: date-time }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /py/advanced/ticker/{symbol}:
    get:
      operationId: getCoinGlassTickerData
      summary: Get real-time ticker data for specific symbol (Premium Access)
      description: "📈 Real-time ticker data with comprehensive market statistics including price, volume, market cap, open interest, and trading metrics for professional market analysis."
      tags: [CoinGlass - Technical Analysis]
      parameters:
        - name: symbol
          in: path
          description: Trading symbol for ticker data (e.g., BTC, ETH, SOL)
          required: true
          schema:
            type: string
            example: "BTC"
      responses:
        '200':
          description: Real-time comprehensive ticker data
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      symbol: { type: string, example: "BTC", description: "Trading symbol" }
                      price: { type: string, example: "58392.45", description: "Current price" }
                      change24h: { type: string, example: "1247.83", description: "24h price change in USD" }
                      changePercent24h: { type: string, example: "2.18", description: "24h price change percentage" }
                      volume24h: { type: string, example: "1456789012.34", description: "24h trading volume" }
                      high24h: { type: string, example: "59150.00", description: "24h high price" }
                      low24h: { type: string, example: "56890.25", description: "24h low price" }
                      marketCap: { type: string, example: "1145678901234.56", description: "Market capitalization" }
                      openInterest: { type: string, example: "34567890123.45", description: "Total open interest" }
                      fundingRate: { type: string, example: "0.0001", description: "Current funding rate" }
                      nextFundingTime: { type: string, format: date-time, description: "Next funding time" }
                      indicators:
                        type: object
                        properties:
                          rsi_14: { type: string, example: "67.34", description: "14-period RSI" }
                          sma_50: { type: string, example: "57234.56", description: "50-period SMA" }
                          ema_20: { type: string, example: "58123.45", description: "20-period EMA" }
                          bollinger_upper: { type: string, example: "60234.67", description: "Bollinger upper band" }
                          bollinger_lower: { type: string, example: "56123.45", description: "Bollinger lower band" }
                  timestamp: { type: string, format: date-time }
        '400':
          description: Invalid symbol
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Invalid symbol" }
                  timestamp: { type: string, format: date-time }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '503':
          description: CoinGlass ticker service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "CoinGlass ticker service unavailable" }
                  timestamp: { type: string, format: date-time }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  # ===== COINGLASS ADVANCED ANALYTICS =====
  /py/advanced/liquidation/heatmap/{symbol}:
    get:
      operationId: getCoinGlassLiquidationHeatmap
      summary: Get liquidation cluster heatmaps for specific symbol (Premium Access)
      description: "🎯 Liquidation cluster analysis with risk level assessment, potential liquidation volumes, and price range analysis. Professional liquidation heatmap for institutional risk management."
      tags: [CoinGlass - Advanced Analytics]
      parameters:
        - name: symbol
          in: path
          description: Trading symbol for liquidation heatmap analysis (e.g., BTC, ETH, SOL)
          required: true
          schema:
            type: string
            example: "BTC"
        - name: range
          in: query
          description: Price range percentage for heatmap analysis (1-20%)
          required: false
          schema:
            type: number
            minimum: 1
            maximum: 20
            default: 10
            example: 10
      responses:
        '200':
          description: Comprehensive liquidation heatmap data
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      symbol: { type: string, example: "BTC", description: "Trading symbol" }
                      current_price: { type: string, example: "58392.45", description: "Current asset price" }
                      liquidation_levels:
                        type: array
                        items:
                          type: object
                          properties:
                            price: { type: string, example: "57000.00", description: "Liquidation price level" }
                            liq_volume: { type: string, example: "145678901.23", description: "Liquidation volume at this level" }
                            side: { type: string, enum: ["long", "short"], example: "long", description: "Position side to be liquidated" }
                            risk_level: { type: string, enum: ["low", "medium", "high"], example: "high", description: "Risk level classification" }
                            distance_pct: { type: string, example: "-2.38", description: "Distance from current price %" }
                      total_long_liq: { type: string, example: "567890123.45", description: "Total long liquidations volume" }
                      total_short_liq: { type: string, example: "234567890.12", description: "Total short liquidations volume" }
                      price_range:
                        type: object
                        properties:
                          min: { type: string, example: "52553.21", description: "Minimum price in analysis range" }
                          max: { type: string, example: "64231.70", description: "Maximum price in analysis range" }
                      heatmap_summary:
                        type: object
                        properties:
                          highest_risk_level: { type: string, example: "57000.00", description: "Price level with highest liquidation risk" }
                          total_at_risk_volume: { type: string, example: "802457014.57", description: "Total volume at risk" }
                          critical_levels_count: { type: integer, example: 5, description: "Number of critical liquidation levels" }
                  timestamp: { type: string, format: date-time }
        '400':
          description: Invalid symbol or parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Invalid symbol or parameters" }
                  timestamp: { type: string, format: date-time }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '503':
          description: CoinGlass liquidation service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "CoinGlass liquidation service unavailable" }
                  timestamp: { type: string, format: date-time }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /py/advanced/spot/orderbook/{symbol}:
    get:
      operationId: getCoinGlassSpotOrderbook
      summary: Get spot orderbook data for specific symbol (Premium Access)
      description: "🎯 Deep spot market orderbook with bid/ask levels, market depth analysis, liquidity distribution, and spread metrics for professional order flow analysis."
      tags: [CoinGlass - Advanced Analytics]
      parameters:
        - name: symbol
          in: path
          description: Trading symbol for orderbook data (e.g., BTC, ETH, SOL)
          required: true
          schema:
            type: string
            example: "BTC"
        - name: depth
          in: query
          description: Orderbook depth level (5, 10, 20, 50, or 100 levels)
          required: false
          schema:
            type: integer
            enum: [5, 10, 20, 50, 100]
            default: 20
            example: 20
      responses:
        '200':
          description: Deep spot market orderbook analysis
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      symbol: { type: string, example: "BTC", description: "Trading symbol" }
                      bids:
                        type: array
                        items:
                          type: array
                          items: { type: string }
                          minItems: 2
                          maxItems: 2
                        example: [["58390.00", "1.2345"], ["58385.50", "0.8765"]]
                        description: "Bid levels [price, quantity]"
                      asks:
                        type: array
                        items:
                          type: array
                          items: { type: string }
                          minItems: 2
                          maxItems: 2
                        example: [["58395.00", "2.1234"], ["58400.25", "1.5432"]]
                        description: "Ask levels [price, quantity]"
                      spread: { type: string, example: "5.00", description: "Bid-ask spread in price units" }
                      spread_percentage: { type: string, example: "0.0086", description: "Bid-ask spread as percentage" }
                      market_depth:
                        type: object
                        properties:
                          bid_depth_1pct: { type: string, example: "45.67", description: "Bid depth within 1% of mid price" }
                          ask_depth_1pct: { type: string, example: "38.92", description: "Ask depth within 1% of mid price" }
                          total_bid_volume: { type: string, example: "156.789", description: "Total bid volume" }
                          total_ask_volume: { type: string, example: "134.567", description: "Total ask volume" }
                          liquidity_score: { type: string, example: "8.7", description: "Market liquidity score (0-10)" }
                      orderbook_analysis:
                        type: object
                        properties:
                          mid_price: { type: string, example: "58392.50", description: "Mid price calculation" }
                          weighted_mid: { type: string, example: "58392.78", description: "Volume-weighted mid price" }
                          imbalance_ratio: { type: string, example: "1.16", description: "Bid/ask volume imbalance ratio" }
                          market_condition: { type: string, enum: ["liquid", "moderate", "thin"], example: "liquid" }
                  timestamp: { type: string, format: date-time }
        '400':
          description: Invalid symbol or parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Invalid symbol or parameters" }
                  timestamp: { type: string, format: date-time }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '503':
          description: CoinGlass spot orderbook service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "CoinGlass orderbook service unavailable" }
                  timestamp: { type: string, format: date-time }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /py/advanced/options/oi/{symbol}:
    get:
      operationId: getCoinGlassOptionsOpenInterest
      summary: Get options open interest for specific symbol (Premium Access)
      description: "🎯 Comprehensive options open interest analysis with call/put ratios, strike price distribution, expiration analysis, and institutional options flow intelligence."
      tags: [CoinGlass - Advanced Analytics]
      parameters:
        - name: symbol
          in: path
          description: Trading symbol for options OI analysis (e.g., BTC, ETH, SOL)
          required: true
          schema:
            type: string
            example: "BTC"
        - name: expiry
          in: query
          description: Options expiry filter (YYYY-MM-DD format, e.g., 2025-01-31)
          required: false
          schema:
            type: string
            format: date
            example: "2025-01-31"
      responses:
        '200':
          description: Comprehensive options open interest analysis
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      symbol: { type: string, example: "BTC", description: "Trading symbol" }
                      current_price: { type: string, example: "58392.45", description: "Current underlying asset price" }
                      total_call_oi: { type: string, example: "1567890.123", description: "Total call options open interest" }
                      total_put_oi: { type: string, example: "987654.321", description: "Total put options open interest" }
                      call_put_ratio: { type: string, example: "1.59", description: "Call/Put open interest ratio" }
                      strike_distribution:
                        type: array
                        items:
                          type: object
                          properties:
                            strike: { type: string, example: "60000", description: "Strike price" }
                            call_oi: { type: string, example: "25678.90", description: "Call OI at this strike" }
                            put_oi: { type: string, example: "15432.10", description: "Put OI at this strike" }
                            total_oi: { type: string, example: "41111.00", description: "Total OI at this strike" }
                            moneyness: { type: string, example: "OTM", description: "ITM/ATM/OTM classification" }
                            delta_call: { type: string, example: "0.35", description: "Call option delta" }
                            delta_put: { type: string, example: "-0.65", description: "Put option delta" }
                      expiration_analysis:
                        type: array
                        items:
                          type: object
                          properties:
                            expiry_date: { type: string, format: date, example: "2025-01-31" }
                            days_to_expiry: { type: integer, example: 45 }
                            call_oi: { type: string, example: "456789.012" }
                            put_oi: { type: string, example: "234567.890" }
                            total_oi: { type: string, example: "691356.902" }
                            call_put_ratio: { type: string, example: "1.95" }
                            max_pain: { type: string, example: "58000", description: "Max pain strike price" }
                      key_levels:
                        type: object
                        properties:
                          max_call_strike: { type: string, example: "65000", description: "Strike with highest call OI" }
                          max_put_strike: { type: string, example: "55000", description: "Strike with highest put OI" }
                          gamma_squeeze_level: { type: string, example: "62000", description: "Potential gamma squeeze level" }
                          put_wall: { type: string, example: "52000", description: "Major put support level" }
                      market_sentiment:
                        type: object
                        properties:
                          bias: { type: string, enum: ["bullish", "bearish", "neutral"], example: "bullish" }
                          confidence: { type: string, enum: ["low", "medium", "high"], example: "high" }
                          institutional_flow: { type: string, enum: ["inflow", "outflow", "neutral"], example: "inflow" }
                          volatility_expectation: { type: string, enum: ["low", "medium", "high"], example: "medium" }
                  timestamp: { type: string, format: date-time }
        '400':
          description: Invalid symbol or parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Invalid symbol or parameters" }
                  timestamp: { type: string, format: date-time }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '503':
          description: CoinGlass options service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "CoinGlass options service unavailable" }
                  timestamp: { type: string, format: date-time }
        '500': { $ref: '#/components/responses/ProblemResponse' }

  /gpts/health:
    get:
      operationId: getGPTsHealth
      summary: GPT Actions service health check
      description: "🔓 Health check endpoint for GPT Actions service. Returns operational status and timestamp. No authentication required."
      tags: ["🚀 GPT Actions"]
      security: []
      responses:
        '200':
          description: Service health status
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      status: { type: string, example: "operational" }
                      timestamp: { type: string, format: date-time }
                      service: { type: string, example: "gpts-gateway" }
                      version: { type: string, example: "1.0.0" }
                  timestamp: { type: string, format: date-time }
                required: ["success", "data", "timestamp"]
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "GPT Actions service unavailable" }
                  timestamp: { type: string, format: date-time }

  /gpts/unified/symbols:
    get:
      operationId: getGPTsUnifiedSymbols
      summary: Get all supported symbols for GPT Actions
      description: "🔓 Returns 56+ supported cryptocurrency symbols for use with GPT Actions endpoints. Includes major cryptos (BTC, ETH, SOL), DeFi tokens (UNI, AAVE), and other supported assets. No authentication required."
      tags: ["🚀 GPT Actions"]
      security: []
      responses:
        '200':
          description: List of supported symbols
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      symbols:
                        type: array
                        items: { type: string }
                        example: ["BTC", "ETH", "SOL", "ADA", "AVAX", "DOT", "ATOM", "NEAR", "ALGO", "FTM", "LUNA", "ONE", "MATIC", "ARB", "OP", "LRC", "UNI", "SUSHI", "AAVE", "COMP", "MKR", "SNX", "CRV", "1INCH", "YFI", "DOGE", "SHIB", "PEPE", "FLOKI", "BONK"]
                      count: { type: integer, example: 56 }
                      updated: { type: string, format: date-time }
                  timestamp: { type: string, format: date-time }
                required: ["success", "data", "timestamp"]
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  error: { type: string, example: "Symbols service unavailable" }
                  timestamp: { type: string, format: date-time }

  /gpts/unified/advanced:
    post:
      operationId: unifiedAdvancedEndpoint
      summary: Unified GPT Actions endpoint for all CoinGlass Premium Intelligence
      description: |
        **🚨 CRITICAL: This API Returns REAL-TIME LIVE DATA (Not Historical)**
        
        Unified GPT Actions endpoint for CoinGlass Premium Intelligence with REAL-TIME price feeds.
        
        **Key Operations:**
        - **ticker**: Get LIVE cryptocurrency prices (updated every 60 seconds from multiple exchanges)
          - Example: BTC currently ~$124,000 USD (as of Oct 2025)
          - Example: SOL currently ~$232 USD (as of Oct 2025)
          - Example: ETH currently ~$4,567 USD (as of Oct 2025)
        - **whale_alerts**: Real-time whale detection (transactions >$1M USD)
        - **etf_flows**: Bitcoin ETF institutional flow tracking
        - **market_sentiment**: Current market sentiment with fear/greed index
        - **liquidation_heatmap**: Live liquidation cluster analysis
        - **spot_orderbook**: Real-time orderbook depth from major exchanges
        
        **⚠️ IMPORTANT FOR GPT:**
        - Always call this API to get current prices - DO NOT use training data
        - Prices change frequently - cached training data is outdated
        - API returns live data from CoinGlass, CoinAPI, and OKX exchanges
        - Data is refreshed every 60 seconds with multi-provider fallback
        
        Use 'op' field for single operations or 'ops' array for batch requests (max 10 ops).
      tags: ["🚀 GPT Actions"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                op:
                  type: string
                  enum: 
                    - whale_alerts
                    - whale_positions
                    - etf_flows
                    - etf_bitcoin
                    - market_sentiment
                    - market_coins
                    - atr
                    - ticker
                    - liquidation_heatmap
                    - spot_orderbook
                    - options_oi
                  description: Operation to perform (use this for single operations)
                params:
                  type: object
                  additionalProperties: true
                  description: Operation parameters
                  example: {"symbol": "BTC", "timeframe": "1h"}
                ops:
                  type: array
                  items:
                    type: object
                    properties:
                      op:
                        type: string
                        enum:
                          - whale_alerts
                          - whale_positions
                          - etf_flows
                          - etf_bitcoin
                          - market_sentiment
                          - market_coins
                          - atr
                          - ticker
                          - liquidation_heatmap
                          - spot_orderbook
                          - options_oi
                        description: Operation to perform
                      params:
                        type: object
                        additionalProperties: true
                        description: Operation parameters
                    required: ["op"]
                  minItems: 1
                  maxItems: 10
                  description: Array of operations to perform (use this for batch operations)
              additionalProperties: false
            examples:
              single_operation_btc:
                summary: Get LIVE Bitcoin price (real-time)
                value:
                  op: ticker
                  params:
                    symbol: BTC
              single_operation_sol:
                summary: Get LIVE Solana price (real-time)
                value:
                  op: ticker
                  params:
                    symbol: SOL
              batch_operations:
                summary: Batch operations with live prices
                value:
                  ops:
                    - op: ticker
                      params:
                        symbol: BTC
                    - op: ticker
                      params:
                        symbol: ETH
                    - op: market_sentiment
      responses:
        '200':
          description: Successful operation(s)
          headers:
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      ok:
                        type: boolean
                        example: true
                      op:
                        type: string
                        example: ticker
                      args:
                        type: object
                        additionalProperties: true
                        example: {"symbol": "SOL"}
                      data:
                        type: object
                        additionalProperties: true
                        example: {"symbol": "SOL", "price": 232.91, "last": 232.91, "timestamp": "2025-10-06T10:36:00Z", "source": "CoinGlass→CoinAPI→OKX", "status": "ok", "cache_ttl": 60}
                    required: ["ok", "op", "args"]
                  - type: object
                    properties:
                      ok:
                        type: boolean
                        example: true
                      results:
                        type: array
                        items:
                          type: object
                          properties:
                            ok:
                              type: boolean
                            op:
                              type: string
                            args:
                              type: object
                              additionalProperties: true
                            data:
                              type: object
                              additionalProperties: true
                            error:
                              type: string
                          required: ["ok", "op", "args"]
                    required: ["ok", "results"]
              examples:
                btc_live_price:
                  summary: LIVE Bitcoin price (Oct 2025)
                  description: Real-time BTC price from CoinGlass/CoinAPI/OKX exchanges
                  value:
                    ok: true
                    op: ticker
                    args: {"symbol": "BTC"}
                    data: {"symbol": "BTC", "price": 124113.0, "last": 124113.0, "timestamp": "2025-10-06T10:36:00Z", "source": "CoinGlass→CoinAPI→OKX", "status": "ok", "cache_ttl": 60}
                sol_live_price:
                  summary: LIVE Solana price (Oct 2025)
                  description: Real-time SOL price from CoinGlass/CoinAPI/OKX exchanges
                  value:
                    ok: true
                    op: ticker
                    args: {"symbol": "SOL"}
                    data: {"symbol": "SOL", "price": 232.91, "last": 232.91, "timestamp": "2025-10-06T10:36:00Z", "source": "CoinGlass→CoinAPI→OKX", "status": "ok", "cache_ttl": 60}
                batch_live_prices:
                  summary: Batch request for multiple live prices
                  description: Get real-time prices for BTC, ETH, and SOL in one request
                  value:
                    ok: true
                    results:
                      - ok: true
                        op: ticker
                        args: {"symbol": "BTC"}
                        data: {"symbol": "BTC", "price": 124113.0, "last": 124113.0, "timestamp": "2025-10-06T10:36:00Z", "source": "CoinGlass→CoinAPI→OKX", "status": "ok", "cache_ttl": 60}
                      - ok: true
                        op: ticker
                        args: {"symbol": "ETH"}
                        data: {"symbol": "ETH", "price": 4567.89, "last": 4567.89, "timestamp": "2025-10-06T10:36:00Z", "source": "CoinGlass→CoinAPI→OKX", "status": "ok", "cache_ttl": 60}
                      - ok: true
                        op: ticker
                        args: {"symbol": "SOL"}
                        data: {"symbol": "SOL", "price": 232.91, "last": 232.91, "timestamp": "2025-10-06T10:36:00Z", "source": "CoinGlass→CoinAPI→OKX", "status": "ok", "cache_ttl": 60}
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Request must contain either 'op' (single) or 'ops' (batch) field"
                  timestamp:
                    type: string
                    format: date-time
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "CoinGlass service temporarily unavailable"
                  timestamp:
                    type: string
                    format: date-time

components:
  headers:
    # ===== RATE LIMITING HEADERS =====
    RateLimit-Limit:
      description: |
        Maximum number of requests allowed in the current window.
        Format: Integer representing the request limit (e.g., 100 for 100 requests per minute).
        
        **Rate Limiting Tiers:**
        - Basic: 60 requests/minute
        - Premium: 100 requests/minute  
        - Enterprise: 500 requests/minute
      schema:
        type: integer
        minimum: 1
        maximum: 10000
        example: 100
        
    RateLimit-Remaining:
      description: |
        Number of requests remaining in the current window.
        Decreases with each request until reset. When this reaches 0, 
        subsequent requests will return 429 status code.
      schema:
        type: integer
        minimum: 0
        example: 42
        
    RateLimit-Reset:
      description: |
        Unix timestamp when the rate limit window resets.
        After this time, RateLimit-Remaining will be restored to RateLimit-Limit.
        Use this to calculate when you can make requests again.
      schema:
        type: integer
        minimum: 0
        example: 1725955200
        
    RateLimit-Policy:
      description: |
        Rate limiting policy in compact format.
        Format: "<limit>;<duration>" where duration can be:
        - s = seconds, m = minutes, h = hours, d = days
        - Example: "100;w=60" = 100 requests per 60-second window
      schema:
        type: string
        pattern: "^[0-9]+;[wsmhd]=[0-9]+$"
        example: "100;w=60"
        
    Retry-After:
      description: |
        Seconds to wait before making another request (only in 429 responses).
        Use this value to implement exponential backoff in your retry logic.
      schema:
        type: integer
        minimum: 1
        maximum: 3600
        example: 60
        
    # ===== PAGINATION HEADERS =====
    Link:
      description: |
        RFC 5988 compliant pagination links for navigating result sets.
        Contains comma-separated link relations with URLs for next, prev, first, last pages.
        
        **Link Relations:**
        - `next`: URL for the next page (if available)
        - `prev`: URL for the previous page (if available)
        - `first`: URL for the first page
        - `last`: URL for the last page (if applicable)
        
        **Example:**
        ```
        Link: </api/btc/funding?cursor=eyJwYWdlfQ&limit=100>; rel="next",
              </api/btc/funding?limit=100>; rel="first"
        ```
      schema:
        type: string
        example: '</api/btc/funding?cursor=eyJwYWdlfQ&limit=100>; rel="next", </api/btc/funding?limit=100>; rel="first"'
        
    X-Total-Count:
      description: |
        Total number of items available across all pages (optional).
        Only provided for endpoints where total count can be efficiently calculated.
        Use for progress indicators and pagination UI.
      schema:
        type: integer
        minimum: 0
        example: 1547
        
    X-Page-Info:
      description: |
        Additional pagination metadata in JSON format.
        Contains information about current page position and availability of more data.
      schema:
        type: string
        example: '{"has_next": true, "has_prev": false, "page_size": 100}'

  parameters:
    # ===== PAGINATION PARAMETERS =====
    CursorParam:
      name: cursor
      in: query
      description: |
        Opaque cursor for pagination navigation (next page token).
        
        **Usage:**
        - Obtain from `next_cursor` in response or `Link` header
        - Base64 encoded token containing page state
        - Required for accessing pages beyond the first
        
        **Example Workflow:**
        1. First request: `/api/btc/funding?limit=100`
        2. Response includes: `"next_cursor": "eyJwYWdlIjoyfQ"`
        3. Next request: `/api/btc/funding?cursor=eyJwYWdlIjoyfQ&limit=100`
      required: false
      schema:
        type: string
        pattern: '^[A-Za-z0-9+/]+=*$'
        example: "eyJwYWdlIjoyfQ=="
        
    LimitParam:
      name: limit
      in: query
      description: |
        Maximum number of items to return per page.
        
        **Limits:**
        - Minimum: 1 item
        - Maximum: 1000 items 
        - Default: 100 items
        - Recommended: 50-200 items for optimal performance
        
        **Performance Notes:**
        - Larger limits may result in slower response times
        - Use smaller limits for real-time applications
        - Larger limits reduce API call overhead for batch processing
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 100
        example: 100
        
    StartParam:
      name: start
      in: query
      description: |
        Start timestamp for data range (inclusive).
        
        **Format:** RFC3339 (ISO 8601) timestamp
        **Timezone:** UTC (Z suffix required)
        **Resolution:** Millisecond precision supported
        
        **Examples:**
        - Basic: `2025-09-15T00:00:00Z`
        - With milliseconds: `2025-09-15T00:00:00.123Z`
        - Relative: Last 24h = current_time - 24h
      required: false
      schema:
        type: string
        format: date-time
        example: "2025-09-15T00:00:00Z"
        
    EndParam:
      name: end
      in: query
      description: |
        End timestamp for data range (exclusive).
        
        **Format:** RFC3339 (ISO 8601) timestamp
        **Timezone:** UTC (Z suffix required)
        **Resolution:** Millisecond precision supported
        
        **Constraints:**
        - Must be after `start` timestamp
        - Maximum range: 30 days from start
        - If omitted, defaults to current time
      required: false
      schema:
        type: string
        format: date-time
        example: "2025-09-15T23:59:59Z"
        
    SymbolParam:
      name: symbol
      in: query
      description: |
        Trading pair symbol for analysis.
        
        **Format:** Exchange-specific format (e.g., SOL-USDT-SWAP)
        **Default:** SOL-USDT-SWAP
        
        **Supported Symbols:**
        - SOL-USDT-SWAP: Solana perpetual
        - BTC-USDT-SWAP: Bitcoin perpetual
        - ETH-USDT-SWAP: Ethereum perpetual
      required: false
      schema:
        type: string
        enum: ["SOL-USDT-SWAP", "BTC-USDT-SWAP", "ETH-USDT-SWAP"]
        default: "SOL-USDT-SWAP"
        example: "SOL-USDT-SWAP"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API key for authenticated access with flexible scopes.
        
        **🔐 Security Scopes:**
        - **read-only**: Basic market data access, technical analysis, and public information
        - **trading**: Trading signals, AI analysis, execution tracking, and advanced features
        - **premium**: VIP8 institutional analytics, enhanced AI, premium features, and priority access
        
        **📋 Authentication Examples:**
        ```bash
        # Authenticated request (required for most endpoints)
        curl -H "X-API-Key: your-api-key" \
             "https://guardiansofthegreentoken.com/api/btc/complete"
        
        # Public endpoint (no API key required)
        curl "https://guardiansofthegreentoken.com/health"
        ```
        
        **🚀 Access Tiers:**
        - **Basic**: 100 requests/minute, read-only scope
        - **Premium**: 500 requests/minute, trading + read-only scopes
        - **Enterprise**: 2000 requests/minute, all scopes including premium
        
        **⚠️ Security Notes:**
        - Keep your API key secure and never expose it in client-side code
        - Use environment variables to store API keys
        - Monitor your usage to avoid rate limiting
        - Contact support to upgrade your access tier
      x-scopes:
        read-only:
          description: "Basic market data, technical analysis, and public information access"
          rate_limit: 100
          features: ["market_data", "technical_analysis", "basic_ai_signals"]
        trading:
          description: "Advanced trading features, AI signals, and execution tracking"
          rate_limit: 500 
          features: ["ai_signals", "execution_tracking", "enhanced_analysis", "trading_signals"]
        premium:
          description: "Institutional-grade analytics, enhanced AI, and premium features"
          rate_limit: 2000
          features: ["premium_analytics", "enhanced_ai", "institutional_data", "priority_support"]

  responses:
    # ===== RFC 7807 COMPLIANT ERROR RESPONSES =====
    
    BadRequest:
      description: Bad Request - Invalid input parameters or malformed request
      headers:
        RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
        RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
        RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            invalid_parameter:
              summary: Invalid parameter format
              value:
                type: "https://guardiansofthegreentoken.com/problems/validation-error"
                title: "Invalid Parameter Format"
                status: 400
                detail: "The 'pair' parameter must match pattern '^[A-Z0-9]{2,10}$'. Received: 'invalid_pair'."
                instance: "/api/invalid_pair/complete"
                code: "INVALID_PARAMETER"
                invalid_params:
                  - name: "pair"
                    reason: "Must be a valid trading pair symbol (2-10 uppercase alphanumeric characters)"
            missing_required_field:
              summary: Missing required field
              value:
                type: "https://guardiansofthegreentoken.com/problems/validation-error"
                title: "Missing Required Field"
                status: 400
                detail: "Required field 'signal_id' is missing from request body."
                instance: "/api/ai/tracking/execution"
                code: "MISSING_REQUIRED_FIELD"
                invalid_params:
                  - name: "signal_id"
                    reason: "This field is required for tracking AI signal execution"
    
    Unauthorized:
      description: Unauthorized - Invalid or missing API key
      headers:
        WWW-Authenticate: { description: 'Authentication challenge', schema: { type: string, example: 'ApiKey realm="CryptoSat API"' } }
        RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
        RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
        RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            missing_api_key:
              summary: Missing API key
              value:
                type: "https://guardiansofthegreentoken.com/problems/authentication-required"
                title: "Authentication Required"
                status: 401
                detail: "API key is required to access this resource. Include 'X-API-Key' header with your request."
                instance: "/api/ai/enhanced-signal"
                code: "MISSING_API_KEY"
            invalid_api_key:
              summary: Invalid API key
              value:
                type: "https://guardiansofthegreentoken.com/problems/authentication-failed"
                title: "Authentication Failed"
                status: 401
                detail: "The provided API key is invalid or has been revoked."
                instance: "/api/ai/enhanced-signal"
                code: "INVALID_API_KEY"
    
    NotFound:
      description: Not Found - The requested resource does not exist
      headers:
        RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
        RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
        RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            unsupported_pair:
              summary: Unsupported trading pair
              value:
                type: "https://guardiansofthegreentoken.com/problems/resource-not-found"
                title: "Trading Pair Not Supported"
                status: 404
                detail: "The trading pair 'UNKNOWN' is not supported. See /api/pairs/supported for available pairs."
                instance: "/api/UNKNOWN/complete"
                code: "UNSUPPORTED_PAIR"
            endpoint_not_found:
              summary: Endpoint not found
              value:
                type: "https://guardiansofthegreentoken.com/problems/resource-not-found"
                title: "Endpoint Not Found"
                status: 404
                detail: "The requested endpoint does not exist."
                instance: "/api/nonexistent"
                code: "ENDPOINT_NOT_FOUND"
    
    ProblemResponse:
      description: Generic error response using RFC 7807 Problem Details
      headers:
        RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
        RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
        RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            server_error:
              summary: Internal server error
              value:
                type: "https://guardiansofthegreentoken.com/problems/server-error"
                title: "Internal Server Error"
                status: 500
                detail: "An unexpected error occurred while processing your request. Our team has been notified."
                instance: "/api/ai/enhanced-signal"
                code: "INTERNAL_ERROR"
                request_id: "req_1757901234567"
            service_unavailable:
              summary: Service temporarily unavailable
              value:
                type: "https://guardiansofthegreentoken.com/problems/service-unavailable"
                title: "Service Temporarily Unavailable"
                status: 503
                detail: "The AI signal engine is temporarily unavailable due to maintenance. Please try again in a few minutes."
                instance: "/api/ai/enhanced-signal"
                code: "SERVICE_UNAVAILABLE"
                retry_after: 300
    TooManyRequests:
      description: Rate limit exceeded - RFC 7807 compliant
      headers:
        RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
        RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
        RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
        Retry-After: { $ref: '#/components/headers/Retry-After' }
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            rate_limit_exceeded:
              summary: Standard rate limit exceeded
              description: |-
                Standard rate limiting scenario with complete retry guidance.
                
                **Retry Strategy:**
                1. Respect the `Retry-After` header value
                2. Implement exponential backoff with jitter
                3. Monitor `RateLimit-Remaining` header to prevent hitting limits
                4. Consider upgrading to higher tier for increased limits
                
                **Example Retry Logic:**
                ```javascript
                const delay = parseInt(headers['Retry-After']) || 60;
                const jitter = Math.random() * 1000; // Add randomness
                setTimeout(retry, (delay * 1000) + jitter);
                ```
              value:
                type: "https://guardiansofthegreentoken.com/problems/rate-limit-exceeded"
                title: "Rate Limit Exceeded"
                status: 429
                detail: "You have exceeded the rate limit of 100 requests per minute. Please wait 42 seconds before making another request. Consider implementing request batching or upgrading your plan for higher limits."
                instance: "/api/ai/enhanced-signal"
                code: "RATE_LIMIT_EXCEEDED"
                rate_limit:
                  limit: 100
                  remaining: 0
                  reset_time: "2025-09-15T02:30:00Z"
                  retry_after: 42
                  policy: "100;w=60"
                  tier: "premium"
                help:
                  upgrade_url: "https://guardiansofthegreentoken.com/pricing"
                  documentation: "https://docs.guardiansofthegreentoken.com/rate-limiting"
                  best_practices: [
                    "Implement exponential backoff with jitter",
                    "Monitor RateLimit-Remaining header",
                    "Batch requests when possible",
                    "Cache responses to reduce API calls"
                  ]
            quota_exceeded:
              summary: Daily quota exceeded
              description: |-
                Daily quota exceeded scenario with clear reset guidance.
                
                **Understanding Quotas:**
                - Daily quotas reset at midnight UTC
                - Separate from rate limits (requests per minute)
                - Track usage via X-Quota-Used and X-Quota-Remaining headers
                
                **Recovery Actions:**
                1. Wait for quota reset (shown in reset_time)
                2. Upgrade plan for higher daily limits
                3. Optimize requests by batching operations
                4. Implement request caching strategies
              value:
                type: "https://guardiansofthegreentoken.com/problems/quota-exceeded"
                title: "Daily Quota Exceeded"
                status: 429
                detail: "You have exceeded your daily quota of 1000 AI signal requests. Quota resets at midnight UTC. Consider upgrading your plan or implementing request optimization strategies."
                instance: "/api/ai/enhanced-signal"
                code: "QUOTA_EXCEEDED"
                quota:
                  limit: 1000
                  used: 1000
                  reset_time: "2025-09-16T00:00:00Z"
                  tier: "premium"
                  upgrade_available: true
                help:
                  upgrade_url: "https://guardiansofthegreentoken.com/pricing"
                  optimization_guide: "https://docs.guardiansofthegreentoken.com/quota-optimization"
                  strategies: [
                    "Implement response caching for repeated queries",
                    "Batch multiple operations in single requests",
                    "Use webhooks instead of polling for real-time data",
                    "Filter requests to only essential data points"
                  ]

  schemas:
    # ===== BASE SCHEMAS =====
    BaseResponse:
      type: object
      description: |
        Base response structure used by all API endpoints.
        Provides consistent success indicators and timestamps across all responses.
      properties:
        success:
          type: boolean
          description: Indicates if the request was processed successfully
          example: true
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp when the response was generated
          example: "2025-09-15T03:30:00.123Z"
      required: ["success", "timestamp"]
      example:
        success: true
        timestamp: "2025-09-15T03:30:00.123Z"

    BaseAnalysisResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          description: |
            Base structure for all analysis responses.
            Extends BaseResponse with common analysis data patterns.
          properties:
            data:
              type: object
              description: Analysis data payload - structure varies by endpoint
              additionalProperties: true
          required: ["data"]

    BaseMetadata:
      type: object
      description: |
        Common metadata structure for data freshness and processing information.
        Used across analysis responses to provide transparency about data quality.
      properties:
        data_sources:
          type: array
          items:
            type: string
          description: List of data sources used for this analysis
          example: ["OKX", "CoinAPI", "Internal Analysis"]
        last_updated:
          type: string
          format: date-time
          description: When the underlying data was last refreshed
          example: "2025-09-15T03:29:45.123Z"
        cache_status:
          type: string
          enum: ["fresh", "cached", "stale"]
          description: Indicates data freshness level
          example: "fresh"
        processing_time_ms:
          type: number
          minimum: 0
          description: Time taken to process this request in milliseconds
          example: 456
      required: ["data_sources", "last_updated", "cache_status"]
      example:
        data_sources: ["OKX", "CoinAPI", "Internal Analysis"]
        last_updated: "2025-09-15T03:29:45.123Z"
        cache_status: "fresh"
        processing_time_ms: 456

    BaseMarketData:
      type: object
      description: |
        Common market data structure used across different analysis types.
        Standardizes price, volume, and change information.
      properties:
        symbol:
          type: string
          description: Trading pair symbol
          pattern: '^[A-Z0-9]+-[A-Z]+-[A-Z]+$'
          example: "SOL-USDT-SWAP"
        price:
          type: string
          pattern: '^-?[0-9]+(\.[0-9]+)?$'
          description: Current price as string to maintain precision
          example: "215.85"
        change24h:
          type: string
          description: 24-hour price change percentage
          pattern: '^[+-]?[0-9]+(\.[0-9]+)?%$'
          example: "+2.34%"
        high24h:
          type: string
          pattern: '^-?[0-9]+(\.[0-9]+)?$'
          description: 24-hour high price
          example: "218.90"
        low24h:
          type: string
          pattern: '^-?[0-9]+(\.[0-9]+)?$'
          description: 24-hour low price
          example: "210.20"
        volume:
          type: string
          pattern: '^-?[0-9]+(\.[0-9]+)?$'
          description: 24-hour trading volume
          example: "892374.56"
        volume_usd:
          type: string
          pattern: '^-?[0-9]+(\.[0-9]+)?$'
          description: 24-hour trading volume in USD
          example: "192847293.12"
      required: ["symbol", "price"]
      example:
        symbol: "SOL-USDT-SWAP"
        price: "215.85"
        change24h: "+2.34%"
        high24h: "218.90"
        low24h: "210.20"
        volume: "892374.56"
        volume_usd: "192847293.12"

    BaseTechnicalIndicator:
      type: object
      description: |
        Base structure for technical indicators with common properties.
        Provides standardized patterns for indicator values and signals.
      properties:
        value:
          type: number
          description: Current indicator value
        signal:
          type: string
          description: Interpreted signal from the indicator
        period:
          type: integer
          minimum: 1
          description: Period/timeframe used for calculation
        confidence:
          type: number
          minimum: 0
          maximum: 100
          description: Confidence level in the indicator signal (0-100%)
      required: ["value"]

    BaseConfidenceAnalysis:
      type: object
      description: |
        Standardized confidence scoring structure for analysis components.
        Provides transparency about the reliability of different analysis aspects.
      properties:
        overall:
          type: number
          minimum: 0
          maximum: 100
          description: Overall confidence score for the entire analysis
          example: 84
        components:
          type: object
          description: Confidence scores for individual analysis components
          additionalProperties:
            type: number
            minimum: 0
            maximum: 100
          example:
            trend_analysis: 89
            pattern_recognition: 76
            volume_analysis: 82
      required: ["overall"]
      example:
        overall: 84
        components:
          trend_analysis: 89
          pattern_recognition: 76
          volume_analysis: 82

    # ===== SPECIALIZED COMPONENT SCHEMAS =====
    EnhancedMarketData:
      allOf:
        - $ref: '#/components/schemas/BaseMarketData'
        - type: object
          description: Enhanced market data with bid/ask spreads and additional trading metrics
          properties:
            bid:
              type: string
              pattern: '^-?[0-9]+(\.[0-9]+)?$'
              description: Current bid price
              example: "215.84"
            ask:
              type: string
              pattern: '^-?[0-9]+(\.[0-9]+)?$'
              description: Current ask price
              example: "215.86"
            spread:
              type: number
              minimum: 0
              description: Bid-ask spread
              example: 0.02

    RSIIndicator:
      allOf:
        - $ref: '#/components/schemas/BaseTechnicalIndicator'
        - type: object
          description: RSI (Relative Strength Index) technical indicator
          properties:
            signal:
              type: string
              enum: ["oversold", "neutral", "overbought"]
              description: RSI signal interpretation
              example: "neutral"
          required: ["signal"]

    MACDIndicator:
      type: object
      description: MACD (Moving Average Convergence Divergence) indicator
      properties:
        line:
          type: number
          description: MACD line value
          example: 1.25
        signal:
          type: number
          description: MACD signal line value
          example: 0.98
        histogram:
          type: number
          description: MACD histogram value
          example: 0.27
        trend:
          type: string
          enum: ["bullish", "bearish", "neutral"]
          description: MACD trend interpretation
          example: "bullish"
      required: ["line", "signal", "histogram", "trend"]

    BollingerBandsIndicator:
      type: object
      description: Bollinger Bands technical indicator
      properties:
        upper:
          type: number
          description: Upper Bollinger Band
          example: 220.15
        middle:
          type: number
          description: Middle Bollinger Band (SMA)
          example: 215.85
        lower:
          type: number
          description: Lower Bollinger Band
          example: 211.55
        position:
          type: string
          enum: ["above_upper", "upper_half", "lower_half", "below_lower"]
          description: Current price position relative to bands
          example: "upper_half"
      required: ["upper", "middle", "lower", "position"]

    MovingAveragesIndicator:
      type: object
      description: Moving averages analysis
      properties:
        sma_20:
          type: number
          description: 20-period Simple Moving Average
          example: 214.20
        sma_50:
          type: number
          description: 50-period Simple Moving Average
          example: 212.45
        ema_20:
          type: number
          description: 20-period Exponential Moving Average
          example: 214.85
        ema_50:
          type: number
          description: 50-period Exponential Moving Average
          example: 213.10
        crossover_signal:
          type: string
          enum: ["golden_cross", "death_cross", "none"]
          description: Moving average crossover signal
          example: "golden_cross"
      required: ["sma_20", "sma_50", "ema_20", "ema_50", "crossover_signal"]

    TechnicalIndicatorsData:
      type: object
      description: Comprehensive technical analysis indicators
      properties:
        rsi:
          $ref: '#/components/schemas/RSIIndicator'
        macd:
          $ref: '#/components/schemas/MACDIndicator'
        bollinger_bands:
          $ref: '#/components/schemas/BollingerBandsIndicator'
        moving_averages:
          $ref: '#/components/schemas/MovingAveragesIndicator'
      required: ["rsi", "macd", "bollinger_bands", "moving_averages"]

    MarketSentimentData:
      type: object
      description: Market sentiment analysis and momentum indicators
      properties:
        overall_sentiment:
          type: string
          enum: ["very_bearish", "bearish", "neutral", "bullish", "very_bullish"]
          description: Overall market sentiment
          example: "bullish"
        sentiment_score:
          type: number
          minimum: 0
          maximum: 100
          description: Numerical sentiment score
          example: 72
        momentum:
          type: string
          enum: ["strong_down", "weak_down", "neutral", "weak_up", "strong_up"]
          description: Market momentum direction and strength
          example: "weak_up"
        volatility:
          type: string
          enum: ["very_low", "low", "medium", "high", "very_high"]
          description: Market volatility level
          example: "medium"
      required: ["overall_sentiment", "sentiment_score", "momentum", "volatility"]

    FundingRateData:
      type: object
      description: Funding rate information for perpetual contracts
      properties:
        current_rate:
          type: string
          pattern: '^-?[0-9]+(\.[0-9]+)?$'
          description: Current funding rate
          example: "0.0000428"
        annual_rate:
          type: string
          pattern: '^[+-]?[0-9]+(\.[0-9]+)?%$'
          description: Annualized funding rate percentage
          example: "15.67%"
        next_funding_time:
          type: string
          format: date-time
          description: Next funding time
          example: "2025-09-15T08:00:00Z"
        predicted_rate:
          type: string
          pattern: '^-?[0-9]+(\.[0-9]+)?$'
          description: Predicted next funding rate
          example: "0.0000435"
      required: ["current_rate", "next_funding_time"]

    OpenInterestData:
      type: object
      description: Open interest and derivatives market metrics
      properties:
        total_oi:
          type: string
          pattern: '^-?[0-9]+(\.[0-9]+)?$'
          description: Total open interest
          example: "3475341.43"
        oi_usd:
          type: string
          pattern: '^-?[0-9]+(\.[0-9]+)?$'
          description: Open interest value in USD
          example: "750234892.12"
        change_24h:
          type: string
          pattern: '^[+-]?[0-9]+(\.[0-9]+)?%$'
          description: 24-hour change in open interest
          example: "+1.2%"
        oi_to_volume_ratio:
          type: number
          minimum: 0
          description: Ratio of open interest to trading volume
          example: 3.89
      required: ["total_oi", "oi_usd"]

    AIInsightsData:
      type: object
      description: AI-powered market analysis and predictions
      properties:
        trend_prediction:
          type: string
          enum: ["strong_bearish", "bearish", "neutral", "bullish", "strong_bullish"]
          description: AI trend prediction
          example: "bullish"
        confidence_level:
          type: number
          minimum: 0
          maximum: 100
          description: AI confidence in the analysis
          example: 74
        key_levels:
          type: object
          properties:
            resistance:
              type: array
              items:
                type: number
              description: Key resistance levels
              example: [218.50, 222.00, 225.75]
            support:
              type: array
              items:
                type: number
              description: Key support levels
              example: [210.20, 207.85, 205.00]
          required: ["resistance", "support"]
        recommendation:
          type: string
          description: AI trading recommendation
          example: "Monitor for breakout above 218.50 with strong volume confirmation"
      required: ["trend_prediction", "confidence_level", "key_levels"]

    RiskMetricsData:
      type: object
      description: Risk assessment and volatility metrics
      properties:
        volatility_24h:
          type: number
          minimum: 0
          description: 24-hour volatility percentage
          example: 4.12
        beta:
          type: number
          description: Beta coefficient relative to market
          example: 1.23
        max_drawdown_7d:
          type: number
          maximum: 0
          description: Maximum drawdown over 7 days (percentage)
          example: -6.8
        sharpe_ratio:
          type: number
          description: Risk-adjusted return ratio
          example: 1.45
        risk_score:
          type: number
          minimum: 0
          maximum: 100
          description: Overall risk score
          example: 38
      required: ["volatility_24h", "risk_score"]

    # ===== SMC ANALYSIS COMPONENT SCHEMAS =====
    OrderBlock:
      type: object
      description: Order block structure for institutional positioning analysis
      properties:
        price_high:
          type: number
          description: Upper boundary of order block
          example: 216.80
        price_low:
          type: number
          description: Lower boundary of order block
          example: 215.20
        strength:
          type: string
          enum: ["weak", "moderate", "strong"]
          description: Strength of the order block
          example: "strong"
        tested:
          type: boolean
          description: Whether the order block has been tested
          example: false
      required: ["price_high", "price_low", "strength", "tested"]

    FairValueGap:
      type: object
      description: Fair Value Gap (FVG) for price inefficiency analysis
      properties:
        gap_high:
          type: number
          description: Upper boundary of the gap
          example: 217.90
        gap_low:
          type: number
          description: Lower boundary of the gap
          example: 216.50
        gap_type:
          type: string
          enum: ["bullish", "bearish"]
          description: Type of fair value gap
          example: "bullish"
        filled_percentage:
          type: number
          minimum: 0
          maximum: 100
          description: Percentage of gap that has been filled
          example: 25
      required: ["gap_high", "gap_low", "gap_type", "filled_percentage"]

    LiquiditySweep:
      type: object
      description: Liquidity sweep event analysis
      properties:
        price:
          type: number
          description: Price level where sweep occurred
          example: 210.20
        sweep_type:
          type: string
          enum: ["buy_side", "sell_side"]
          description: Type of liquidity sweep
          example: "sell_side"
        timestamp:
          type: string
          format: date-time
          description: When the sweep occurred
          example: "2025-09-15T00:45:00Z"
      required: ["price", "sweep_type", "timestamp"]

    MarketStructureData:
      type: object
      description: Market structure analysis for trend identification
      properties:
        structure_type:
          type: string
          enum: ["uptrend", "downtrend", "ranging", "transition"]
          description: Current market structure type
          example: "uptrend"
        current_phase:
          type: string
          enum: ["impulse", "correction", "consolidation"]
          description: Current phase within structure
          example: "impulse"
        structure_strength:
          type: string
          enum: ["weak", "moderate", "strong"]
          description: Strength of current structure
          example: "strong"
      required: ["structure_type", "current_phase", "structure_strength"]

    BreakOfStructureData:
      type: object
      description: Break of structure (BOS) analysis
      properties:
        type:
          type: string
          enum: ["bullish", "bearish"]
          description: Type of structure break
          example: "bullish"
        price:
          type: string
          pattern: '^-?[0-9]+(\.[0-9]+)?$'
          description: Price level where BOS occurred
          example: "214.25"
        timestamp:
          type: string
          format: date-time
          description: When the BOS occurred
          example: "2025-09-15T01:15:00Z"
        significance:
          type: string
          enum: ["minor", "major", "critical"]
          description: Significance level of the BOS
          example: "major"
        confirmation:
          type: boolean
          description: Whether the BOS is confirmed
          example: true
      required: ["type", "price", "timestamp", "significance", "confirmation"]

    SMCLiquidityAnalysis:
      type: object
      description: Comprehensive liquidity analysis for SMC
      properties:
        buy_side_liquidity:
          type: array
          items:
            type: number
          description: Buy-side liquidity levels
          example: [218.90, 222.00, 225.50]
        sell_side_liquidity:
          type: array
          items:
            type: number
          description: Sell-side liquidity levels
          example: [210.20, 207.85, 205.00]
        recent_sweeps:
          type: array
          items:
            $ref: '#/components/schemas/LiquiditySweep'
          description: Recent liquidity sweep events
      required: ["buy_side_liquidity", "sell_side_liquidity"]

    SMCAnalysisData:
      type: object
      description: Complete Smart Money Concepts analysis data
      properties:
        timeframe:
          type: string
          description: Analysis timeframe
          example: "1H"
        trend:
          type: string
          enum: ["bullish", "bearish", "ranging"]
          description: Overall trend direction
          example: "bullish"
        market_structure:
          $ref: '#/components/schemas/MarketStructureData'
        break_of_structure:
          $ref: '#/components/schemas/BreakOfStructureData'
        order_blocks:
          type: object
          properties:
            bullish_blocks:
              type: array
              items:
                $ref: '#/components/schemas/OrderBlock'
            bearish_blocks:
              type: array
              items:
                $ref: '#/components/schemas/OrderBlock'
        fair_value_gaps:
          type: object
          properties:
            active_gaps:
              type: array
              items:
                $ref: '#/components/schemas/FairValueGap'
        liquidity_analysis:
          $ref: '#/components/schemas/SMCLiquidityAnalysis'
        confidence:
          type: number
          minimum: 0
          maximum: 100
          description: Overall confidence in SMC analysis
          example: 86
        trading_bias:
          type: string
          enum: ["bullish", "bearish", "neutral"]
          description: SMC-derived trading bias
          example: "bullish"
      required: ["timeframe", "trend", "market_structure", "confidence", "trading_bias"]

    # ===== PAGINATION SCHEMAS =====
    PaginationMeta:
      type: object
      description: Pagination metadata for paginated responses
      properties:
        has_next:
          type: boolean
          description: Whether more pages are available after current page
          example: true
        has_prev:
          type: boolean  
          description: Whether previous pages exist before current page
          example: false
        page_size:
          type: integer
          description: Number of items in current page
          minimum: 1
          maximum: 1000
          example: 100
        total_count:
          type: integer
          description: Total number of items across all pages (if available)
          minimum: 0
          example: 1547
        next_cursor:
          type: string
          description: Cursor token for the next page (if has_next is true)
          pattern: '^[A-Za-z0-9+/]+=*$'
          example: "eyJwYWdlIjozLCJ0aW1lc3RhbXAiOjE3MjU5NTUyMDB9"
        prev_cursor:
          type: string
          description: Cursor token for the previous page (if has_prev is true)
          pattern: '^[A-Za-z0-9+/]+=*$'
          example: "eyJwYWdlIjoxLCJ0aW1lc3RhbXAiOjE3MjU5NTUyMDB9"
      required: ["has_next", "has_prev", "page_size"]
      example:
        has_next: true
        has_prev: false
        page_size: 100
        total_count: 1547
        next_cursor: "eyJwYWdlIjozLCJ0aW1lc3RhbXAiOjE3MjU5NTUyMDB9"

    RateLimitInfo:
      type: object
      description: Rate limiting information included in error responses
      properties:
        limit:
          type: integer
          description: Maximum requests allowed in current window
          minimum: 1
          example: 100
        remaining:
          type: integer
          description: Requests remaining in current window
          minimum: 0
          example: 0
        reset_time:
          type: string
          format: date-time
          description: When the rate limit window resets (ISO 8601)
          example: "2025-09-15T02:30:00Z"
        retry_after:
          type: integer
          description: Seconds to wait before retrying
          minimum: 1
          maximum: 3600
          example: 42
        policy:
          type: string
          description: Rate limiting policy description
          pattern: "^[0-9]+;[wsmhd]=[0-9]+$"
          example: "100;w=60"
      required: ["limit", "remaining", "reset_time"]
      example:
        limit: 100
        remaining: 0
        reset_time: "2025-09-15T02:30:00Z"
        retry_after: 42
        policy: "100;w=60"

    # ===== CORE RESPONSE SCHEMAS =====
    CompleteAnalysisResponse:
      allOf:
        - $ref: '#/components/schemas/BaseAnalysisResponse'
        - type: object
          description: |
            Comprehensive trading data analysis for any supported pair using composition patterns.
            Combines enhanced market data, technical indicators, sentiment analysis, and AI insights.
            
            **Schema Composition:**
            - Extends BaseAnalysisResponse (success, timestamp, data structure)
            - Uses specialized component schemas for maximum reusability
            - Implements allOf patterns for maintainable, consistent design
            
            **Features:**
            - Enhanced market data with bid/ask spreads
            - Complete technical indicator suite (RSI, MACD, Bollinger Bands, Moving Averages)
            - Market sentiment and momentum analysis
            - Funding rate and open interest data
            - AI-powered insights and predictions
            - Risk assessment metrics
            - Metadata for data transparency
          properties:
            data:
              type: object
              properties:
                ticker:
                  $ref: '#/components/schemas/EnhancedMarketData'
                technical_indicators:
                  $ref: '#/components/schemas/TechnicalIndicatorsData'
                market_sentiment:
                  $ref: '#/components/schemas/MarketSentimentData'
                funding_rate:
                  $ref: '#/components/schemas/FundingRateData'
                open_interest:
                  $ref: '#/components/schemas/OpenInterestData'
                ai_insights:
                  $ref: '#/components/schemas/AIInsightsData'
                risk_metrics:
                  $ref: '#/components/schemas/RiskMetricsData'
              required: ["ticker", "technical_indicators", "market_sentiment"]
            metadata:
              $ref: '#/components/schemas/BaseMetadata'
          required: ["data", "metadata"]
          example:
            success: true
            data:
              ticker:
                symbol: "SOL-USDT-SWAP"
                price: "215.85"
                change24h: "+2.34%"
                high24h: "218.90"
                low24h: "210.20"
                volume: "892374.56"
                volume_usd: "192847293.12"
                bid: "215.84"
                ask: "215.86"
                spread: 0.02
              technical_indicators:
                rsi:
                  value: 67.8
                  signal: "neutral"
                  period: 14
                macd:
                  line: 1.25
                  signal: 0.98
                  histogram: 0.27
                  trend: "bullish"
                bollinger_bands:
                  upper: 220.15
                  middle: 215.85
                  lower: 211.55
                  position: "upper_half"
                moving_averages:
                  sma_20: 214.20
                  sma_50: 212.45
                  ema_20: 214.85
                  ema_50: 213.10
                  crossover_signal: "golden_cross"
              market_sentiment:
                overall_sentiment: "bullish"
                sentiment_score: 72
                momentum: "weak_up"
                volatility: "medium"
              funding_rate:
                current_rate: "0.0000428"
                annual_rate: "15.67%"
                next_funding_time: "2025-09-15T08:00:00Z"
                predicted_rate: "0.0000435"
              open_interest:
                total_oi: "3475341.43"
                oi_usd: "750234892.12"
                change_24h: "+1.2%"
                oi_to_volume_ratio: 3.89
              ai_insights:
                trend_prediction: "bullish"
                confidence_level: 74
                key_levels:
                  resistance: [218.50, 222.00, 225.75]
                  support: [210.20, 207.85, 205.00]
                recommendation: "Monitor for breakout above 218.50 with strong volume confirmation"
              risk_metrics:
                volatility_24h: 4.12
                beta: 1.23
                max_drawdown_7d: -6.8
                sharpe_ratio: 1.45
                risk_score: 38
            metadata:
              data_sources: ["OKX", "CoinAPI", "Internal Analysis"]
              last_updated: "2025-09-15T02:48:30.123Z"
              cache_status: "fresh"
              processing_time_ms: 456
            timestamp: "2025-09-15T02:48:35.789Z"

    SMCAnalysisResponse:
      allOf:
        - $ref: '#/components/schemas/BaseAnalysisResponse'
        - type: object
          description: |
            Smart Money Concepts (SMC) analysis using composition patterns for institutional-grade market structure analysis.
            
            **Schema Composition:**
            - Extends BaseAnalysisResponse (success, timestamp, data structure)
            - Uses specialized SMC component schemas for maximum reusability
            - Implements allOf patterns for maintainable, consistent design
            
            **SMC Analysis Features:**
            - Market structure identification (uptrend, downtrend, ranging)
            - Break of structure (BOS) detection and confirmation
            - Order block analysis (bullish/bearish institutional zones)
            - Fair value gap (FVG) identification and fill tracking
            - Liquidity analysis and sweep detection
            - Confidence scoring and trading bias determination
            
            **Professional Trading Applications:**
            - Institutional positioning analysis
            - Liquidity hunt identification
            - Market structure confirmation
            - Entry/exit timing optimization
          properties:
            data:
              $ref: '#/components/schemas/SMCAnalysisData'
          required: ["data"]
          example:
            success: true
            data:
              timeframe: "1H"
              trend: "bullish"
              market_structure:
                structure_type: "uptrend"
                current_phase: "impulse"
                structure_strength: "strong"
              break_of_structure:
                type: "bullish"
                price: "214.25"
                timestamp: "2025-09-15T01:15:00Z"
                significance: "major"
                confirmation: true
              order_blocks:
                bullish_blocks:
                  - price_high: 216.80
                    price_low: 215.20
                    strength: "strong"
                    tested: false
                bearish_blocks:
                  - price_high: 220.50
                    price_low: 219.10
                    strength: "moderate"
                    tested: true
              fair_value_gaps:
                active_gaps:
                  - gap_high: 217.90
                    gap_low: 216.50
                    gap_type: "bullish"
                    filled_percentage: 25
              liquidity_analysis:
                buy_side_liquidity: [218.90, 222.00, 225.50]
                sell_side_liquidity: [210.20, 207.85, 205.00]
                recent_sweeps:
                  - price: 210.20
                    sweep_type: "sell_side"
                    timestamp: "2025-09-15T00:45:00Z"
              confidence: 86
              trading_bias: "bullish"
            timestamp: "2025-09-15T02:49:00Z"

    CVDAnalysisResponse:
      type: object
      required: ["success", "data", "timestamp"]
      description: |
        Cumulative Volume Delta (CVD) analysis providing insights into buying vs selling pressure.
        Tracks institutional order flow and detects divergences between price and volume.
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            timeframe: { type: string, example: "1H" }
            current_analysis:
              type: object
              description: Current CVD metrics and real-time data
              properties:
                currentCVD: { type: number, example: 892347.15, description: "Current cumulative volume delta" }
                previousCVD: { type: number, example: 875692.80, description: "Previous period CVD value" }
                deltaChange: { type: number, example: 16654.35, description: "CVD change from previous period" }
                percentageChange: { type: number, example: 1.90 }
                trend: { type: string, enum: ["accumulation", "distribution", "neutral"], example: "accumulation" }
            volume_profile:
              type: object
              description: Volume distribution and order flow characteristics
              properties:
                buy_volume: { type: number, example: 548291.75, description: "Total buy volume" }
                sell_volume: { type: number, example: 344082.81, description: "Total sell volume" }
                buy_sell_ratio: { type: number, example: 1.59 }
                aggressive_buyers: { type: number, example: 312847.20, description: "Market buy orders volume" }
                aggressive_sellers: { type: number, example: 198735.45, description: "Market sell orders volume" }
                passive_volume: { type: number, example: 380791.91, description: "Limit order volume" }
            divergence_analysis:
              type: object
              description: Price-CVD divergence detection and strength assessment
              properties:
                divergence_present: { type: boolean, example: false }
                divergence_type: { type: string, enum: ["bullish", "bearish", "none"], example: "none" }
                divergence_strength: { type: string, enum: ["weak", "moderate", "strong"], example: "moderate", description: "Divergence strength (only present when divergence_present=true)" }
                price_trend: { type: string, enum: ["up", "down", "sideways"], example: "up" }
                cvd_trend: { type: string, enum: ["up", "down", "sideways"], example: "up" }
                correlation_score: { type: number, minimum: -1, maximum: 1, example: 0.78 }
            institutional_flow:
              type: object
              description: Institutional money flow indicators
              properties:
                flow_direction: { type: string, enum: ["inflow", "outflow", "neutral"], example: "inflow" }
                flow_strength: { type: string, enum: ["weak", "moderate", "strong"], example: "moderate" }
                large_order_ratio: { type: number, example: 0.34 }
                whale_activity: { type: string, enum: ["high", "medium", "low"], example: "medium" }
            market_impact:
              type: object
              description: CVD impact on price action and market structure
              properties:
                price_support_level: { type: number, example: 214.80 }
                price_resistance_level: { type: number, example: 218.20 }
                breakout_probability: { type: number, minimum: 0, maximum: 100, example: 67 }
                continuation_signal: { type: string, enum: ["strong", "moderate", "weak", "none"], example: "moderate" }
            confidence:
              type: object
              description: Confidence levels for CVD analysis components
              properties:
                overall: { type: number, minimum: 0, maximum: 100, example: 84 }
                trend_confidence: { type: number, minimum: 0, maximum: 100, example: 89 }
                divergence_confidence: { type: number, minimum: 0, maximum: 100, example: 76 }
                flow_confidence: { type: number, minimum: 0, maximum: 100, example: 82 }
        timestamp: { type: string, format: date-time, example: "2025-09-15T02:49:00Z" }
      example:
        success: true
        data:
          timeframe: "1H"
          current_analysis:
            currentCVD: 892347.15
            previousCVD: 875692.80
            deltaChange: 16654.35
            percentageChange: 1.90
            trend: "accumulation"
          volume_profile:
            buy_volume: 548291.75
            sell_volume: 344082.81
            buy_sell_ratio: 1.59
            aggressive_buyers: 312847.20
            aggressive_sellers: 198735.45
            passive_volume: 380791.91
          divergence_analysis:
            divergence_present: false
            divergence_type: "none"
            divergence_strength: "moderate"
            price_trend: "up"
            cvd_trend: "up"
            correlation_score: 0.78
          institutional_flow:
            flow_direction: "inflow"
            flow_strength: "moderate"
            large_order_ratio: 0.34
            whale_activity: "medium"
          market_impact:
            price_support_level: 214.80
            price_resistance_level: 218.20
            breakout_probability: 67
            continuation_signal: "moderate"
          confidence:
            overall: 84
            trend_confidence: 89
            divergence_confidence: 76
            flow_confidence: 82
        timestamp: "2025-09-15T02:49:00Z"

    TechnicalAnalysisResponse:
      type: object
      required: ["success", "data", "timestamp"]
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            timeframe: { type: string, example: "1H" }
            rsi:
              type: object
              properties:
                current: { type: number, example: 43.56 }
                period: { type: number, example: 14 }
                signal: { type: string, enum: ["oversold","neutral","overbought"], example: "neutral" }
            ema:
              type: object
              properties:
                ema20: { type: number, example: 111250.5, description: "20-period Exponential Moving Average" }
                ema50: { type: number, example: 112100.2, description: "50-period Exponential Moving Average" }
                crossover: { type: string, enum: ["bullish","bearish","none"], example: "bearish" }
        timestamp: { type: string, format: date-time, example: "2025-09-06T14:30:00Z" }

    FundingRateResponse:
      type: object
      required: ["success", "data", "timestamp"]
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            instId: { type: string, example: "BTC-USDT-SWAP" }
            fundingRate: { type: number, example: 0.0000888594997051, description: "Current funding rate (8h basis)" }
            nextFundingRate: { type: number, example: 0.0001234567890123, description: "Predicted next funding rate" }
            nextFundingTime: { type: string, format: date-time, example: "2025-09-06T16:00:00Z" }
            nextCursor: { type: ["string", "null"], example: "eyJwYWdlIjoyfQ==" }
        timestamp: { type: string, format: date-time, example: "2025-09-06T14:30:00Z" }

    OpenInterestResponse:
      type: object
      required: ["success", "data", "timestamp"]
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            instId: { type: string, example: "BTC-USDT-SWAP" }
            oi: { type: number, example: 234567.89, description: "Open interest in base currency" }
            oiUsd: { type: number, example: 25987653210.45, description: "Open interest USD notional value" }
            change24h: { type: string, example: "2.34%" }
            nextCursor: { type: ["string", "null"], example: "eyJwYWdlIjozfQ==" }
        timestamp: { type: string, format: date-time, example: "2025-09-06T14:30:00Z" }

    # ===== RFC 7807 PROBLEM DETAILS SCHEMAS =====
    
    ProblemDetails:
      type: object
      description: |
        RFC 7807 Problem Details for HTTP APIs.
        A machine-readable format for specifying errors in HTTP API responses.
      required: [type, title]
      properties:
        type:
          type: string
          format: uri
          description: |
            A URI reference that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type.
          example: "https://guardiansofthegreentoken.com/problems/validation-error"
        title:
          type: string
          description: |
            A short, human-readable summary of the problem type. It SHOULD NOT change
            from occurrence to occurrence of the problem.
          example: "Invalid Parameter Format"
        status:
          type: integer
          minimum: 100
          maximum: 599
          description: |
            The HTTP status code for this occurrence of the problem.
          example: 400
        detail:
          type: string
          description: |
            A human-readable explanation specific to this occurrence of the problem.
          example: "The 'pair' parameter must match pattern '^[A-Z0-9]{2,10}$'. Received: 'invalid_pair'."
        instance:
          type: string
          format: uri
          description: |
            A URI reference that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
          example: "/api/invalid_pair/complete"
        # Extension members (application-specific)
        code:
          type: string
          pattern: "^[A-Z_]+$"
          description: |
            Application-specific error code for programmatic error handling.
          example: "INVALID_PARAMETER"
        request_id:
          type: string
          description: |
            Unique identifier for this request, useful for debugging and support.
          example: "req_1757901234567"
        invalid_params:
          type: array
          description: |
            Details about invalid parameters for validation errors.
          items:
            type: object
            required: [name, reason]
            properties:
              name:
                type: string
                description: "Name of the invalid parameter"
                example: "pair"
              reason:
                type: string
                description: "Reason why the parameter is invalid"
                example: "Must be a valid trading pair symbol (2-10 uppercase alphanumeric characters)"
        rate_limit:
          type: object
          description: |
            Rate limiting information for 429 errors.
          properties:
            limit:
              type: integer
              description: "Maximum number of requests allowed"
              example: 100
            remaining:
              type: integer
              description: "Number of requests remaining in current window"
              example: 0
            reset_time:
              type: string
              format: date-time
              description: "Time when the rate limit resets"
              example: "2025-09-15T02:30:00Z"
            retry_after:
              type: integer
              description: "Seconds to wait before retrying"
              example: 42
        quota:
          type: object
          description: |
            Quota information for quota exceeded errors.
          properties:
            limit:
              type: integer
              description: "Maximum quota allowed"
              example: 1000
            used:
              type: integer
              description: "Amount of quota used"
              example: 1000
            reset_time:
              type: string
              format: date-time
              description: "Time when the quota resets"
              example: "2025-09-16T00:00:00Z"
        retry_after:
          type: integer
          description: |
            Seconds to wait before retrying (for 503 Service Unavailable errors).
          example: 300
      additionalProperties: false
      example:
        type: "https://guardiansofthegreentoken.com/problems/validation-error"
        title: "Invalid Parameter Format"
        status: 400
        detail: "The 'pair' parameter must match pattern '^[A-Z0-9]{2,10}$'. Received: 'invalid_pair'."
        instance: "/api/invalid_pair/complete"
        code: "INVALID_PARAMETER"
        request_id: "req_1757901234567"
        invalid_params:
          - name: "pair"
            reason: "Must be a valid trading pair symbol (2-10 uppercase alphanumeric characters)"
