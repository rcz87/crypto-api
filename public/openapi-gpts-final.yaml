openapi: 3.1.0
info:
  title: CryptoSat Intelligence API
  description: API trading crypto real-time dengan 30+ endpoint termasuk coin tracker (new listings, volume spikes, whale alerts, opportunities)
  version: 5.4.0-coin-tracker
  contact:
    email: admin@guardiansofthegreentoken.com

servers:
  - url: https://guardiansofthegreentoken.com

paths:
  /api/pairs/supported:
    get:
      operationId: getSupportedTradingPairs
      summary: Daftar trading pair
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/{pair}/complete:
    get:
      operationId: getCompleteAnalysis
      summary: Analisis lengkap pair
      parameters:
        - name: pair
          in: path
          required: true
          description: "Symbol only: BTC, ETH, SOL, ADA, AVAX, DOGE (NO suffix like -USDT-SWAP)"
          schema:
            type: string
            example: BTC
            enum: [BTC, ETH, SOL, ADA, AVAX, DOGE, XRP, MATIC, DOT, LINK, UNI, ATOM, LTC, BCH, ETC, FIL, AAVE, ALGO, NEAR, FTM]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/{pair}/smc:
    get:
      operationId: getSmartMoneyConcepts
      summary: Smart Money analysis
      parameters:
        - name: pair
          in: path
          required: true
          description: "Symbol only: BTC, ETH, SOL, ADA, AVAX, DOGE (NO suffix like -USDT-SWAP)"
          schema:
            type: string
            example: BTC
            enum: [BTC, ETH, SOL, ADA, AVAX, DOGE, XRP, MATIC, DOT, LINK, UNI, ATOM, LTC, BCH, ETC, FIL, AAVE, ALGO, NEAR, FTM]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/{pair}/cvd:
    get:
      operationId: getCVDAnalysis
      summary: Cumulative Volume Delta
      parameters:
        - name: pair
          in: path
          required: true
          description: "Symbol only: BTC, ETH, SOL, ADA, AVAX, DOGE (NO suffix like -USDT-SWAP)"
          schema:
            type: string
            example: BTC
            enum: [BTC, ETH, SOL, ADA, AVAX, DOGE, XRP, MATIC, DOT, LINK, UNI, ATOM, LTC, BCH, ETC, FIL, AAVE, ALGO, NEAR, FTM]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/{pair}/technical:
    get:
      operationId: getTechnicalIndicators
      summary: Indikator teknikal
      parameters:
        - name: pair
          in: path
          required: true
          description: "Symbol only: BTC, ETH, SOL, ADA, AVAX, DOGE (NO suffix like -USDT-SWAP)"
          schema:
            type: string
            example: BTC
            enum: [BTC, ETH, SOL, ADA, AVAX, DOGE, XRP, MATIC, DOT, LINK, UNI, ATOM, LTC, BCH, ETC, FIL, AAVE, ALGO, NEAR, FTM]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/{pair}/funding:
    get:
      operationId: getFundingRates
      summary: Funding rates
      parameters:
        - name: pair
          in: path
          required: true
          description: "Symbol only: BTC, ETH, SOL, ADA, AVAX, DOGE (NO suffix like -USDT-SWAP)"
          schema:
            type: string
            example: BTC
            enum: [BTC, ETH, SOL, ADA, AVAX, DOGE, XRP, MATIC, DOT, LINK, UNI, ATOM, LTC, BCH, ETC, FIL, AAVE, ALGO, NEAR, FTM]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/{pair}/open-interest:
    get:
      operationId: getOpenInterest
      summary: Open interest data
      parameters:
        - name: pair
          in: path
          required: true
          description: "Symbol only: BTC, ETH, SOL, ADA, AVAX, DOGE (NO suffix like -USDT-SWAP)"
          schema:
            type: string
            example: BTC
            enum: [BTC, ETH, SOL, ADA, AVAX, DOGE, XRP, MATIC, DOT, LINK, UNI, ATOM, LTC, BCH, ETC, FIL, AAVE, ALGO, NEAR, FTM]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/ai/signal:
    get:
      operationId: getAISignal
      summary: AI trading signal
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/ai/enhanced-signal:
    get:
      operationId: getEnhancedAISignal
      summary: "ðŸ§  Enhanced AI Signal - GPT-4o Deep Analysis"
      description: "Institutional-grade AI signal with GPT-4o reasoning, 25-feature neural network, enhanced market context (heatmap, orderbook, liquidation zones), evidence-based analysis, and pattern tracking. Returns direction, confidence, and institutional insights."
      parameters:
        - name: symbol
          in: query
          required: false
          description: "Trading pair symbol (default: SOL-USDT-SWAP)"
          schema:
            type: string
            example: "SOL-USDT-SWAP"
            enum: ["BTC-USDT-SWAP", "ETH-USDT-SWAP", "SOL-USDT-SWAP"]
      responses:
        '200':
          description: Enhanced AI signal dengan GPT-4o reasoning
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      signal_id:
                        type: string
                        description: Unique signal ID
                      timestamp:
                        type: string
                        format: date-time
                      symbol:
                        type: string
                      direction:
                        type: string
                        enum: ["bullish", "bearish", "neutral"]
                      strength:
                        type: number
                        description: Signal strength 0-100
                      confidence:
                        type: number
                        description: GPT confidence 0-100
                      reasoning:
                        type: object
                        description: GPT-4o institutional reasoning with evidence-based analysis
                        properties:
                          primary_factors:
                            type: array
                            items:
                              type: string
                            description: Key institutional patterns detected (e.g., Predictive Institutional Flow, Liquidity Hunt)
                          supporting_evidence:
                            type: array
                            items:
                              type: string
                            description: Evidence for each factor with confidence and R:R ratios
                          risk_factors:
                            type: array
                            items:
                              type: string
                            description: Risk considerations and market uncertainties
                          market_context:
                            type: string
                            description: Comprehensive market context analysis
                          neural_analysis:
                            type: string
                            description: Neural network analysis insights
                          pattern_confluence:
                            type: number
                            description: Pattern confluence score 0-1
                      neural_prediction:
                        type: object
                        description: Neural network prediction
                      detected_patterns:
                        type: array
                        description: AI-detected trading patterns

  /api/ai/enhanced-performance:
    get:
      operationId: getEnhancedAIPerformance
      summary: AI performance metrics
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/ai/tracking/execution:
    post:
      operationId: recordAITradeExecution
      summary: Record AI trade execution
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/ai/tracking/outcome:
    post:
      operationId: recordAITradeOutcome
      summary: Record trade outcome
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/ai/tracking/overall-performance:
    get:
      operationId: getAIOverallPerformance
      summary: Overall AI performance
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/premium/institutional-analytics:
    get:
      operationId: getPremiumInstitutionalAnalytics
      summary: Institutional analytics
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/sol/funding/enhanced:
    get:
      operationId: getSOLEnhancedFunding
      summary: SOL funding rate
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/sol/volume-profile:
    get:
      operationId: getSOLVolumeProfile
      summary: SOL volume profile
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/sol/fibonacci:
    get:
      operationId: getSOLFibonacci
      summary: SOL Fibonacci levels
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/sol/order-flow:
    get:
      operationId: getSOLOrderFlow
      summary: SOL order flow
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /api/sol/liquidation-heatmap:
    get:
      operationId: getSOLLiquidationHeatmap
      summary: SOL liquidation heatmap
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /health:
    get:
      operationId: getHealthStatus
      summary: System health check
      parameters:
        - name: days
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /py/advanced/etf/bitcoin:
    get:
      operationId: getCoinGlassBitcoinETFs
      summary: Bitcoin ETF data
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /py/advanced/market/sentiment:
    get:
      operationId: getCoinGlassMarketSentiment
      summary: Market sentiment
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /py/advanced/market/coins:
    get:
      operationId: getCoinGlassSupportedCoins
      summary: Supported coins
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /py/advanced/technical/atr:
    get:
      operationId: getCoinGlassATRData
      summary: ATR volatility
      parameters:
        - name: symbol
          in: query
          required: true
          description: "Symbol only: BTC, ETH, SOL (NO suffix like -USDT-SWAP)"
          schema:
            type: string
            example: BTC
            enum: [BTC, ETH, SOL, ADA, AVAX, DOGE, XRP, MATIC, DOT, LINK, UNI, ATOM, LTC, BCH, ETC, FIL, AAVE, ALGO, NEAR, FTM]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /py/advanced/ticker/{symbol}:
    get:
      operationId: getCoinGlassTickerData
      summary: Real-time ticker
      parameters:
        - name: symbol
          in: path
          required: true
          description: "Symbol only: BTC, ETH, SOL (NO suffix like -USDT-SWAP)"
          schema:
            type: string
            example: BTC
            enum: [BTC, ETH, SOL, ADA, AVAX, DOGE, XRP, MATIC, DOT, LINK, UNI, ATOM, LTC, BCH, ETC, FIL, AAVE, ALGO, NEAR, FTM]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /py/advanced/liquidation/heatmap/{symbol}:
    get:
      operationId: getCoinGlassLiquidationHeatmap
      summary: Liquidation heatmap
      parameters:
        - name: symbol
          in: path
          required: true
          description: "Symbol only: BTC, ETH, SOL (NO suffix like -USDT-SWAP)"
          schema:
            type: string
            example: BTC
            enum: [BTC, ETH, SOL, ADA, AVAX, DOGE, XRP, MATIC, DOT, LINK, UNI, ATOM, LTC, BCH, ETC, FIL, AAVE, ALGO, NEAR, FTM]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /py/advanced/spot/orderbook/{symbol}:
    get:
      operationId: getCoinGlassSpotOrderbook
      summary: Spot orderbook
      parameters:
        - name: symbol
          in: path
          required: true
          description: "Symbol only: BTC, ETH, SOL (NO suffix like -USDT-SWAP)"
          schema:
            type: string
            example: BTC
            enum: [BTC, ETH, SOL, ADA, AVAX, DOGE, XRP, MATIC, DOT, LINK, UNI, ATOM, LTC, BCH, ETC, FIL, AAVE, ALGO, NEAR, FTM]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /py/advanced/options/oi/{symbol}:
    get:
      operationId: getCoinGlassOptionsOpenInterest
      summary: Options OI
      parameters:
        - name: symbol
          in: path
          required: true
          description: "Symbol only: BTC, ETH, SOL (NO suffix like -USDT-SWAP)"
          schema:
            type: string
            example: BTC
            enum: [BTC, ETH, SOL, ADA, AVAX, DOGE, XRP, MATIC, DOT, LINK, UNI, ATOM, LTC, BCH, ETC, FIL, AAVE, ALGO, NEAR, FTM]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /gpts/unified/symbols:
    get:
      operationId: getGPTsUnifiedSymbols
      summary: All supported symbols
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /gpts/unified/advanced:
    post:
      operationId: unifiedCoinTracker
      summary: Unified coin tracker - new listings, volume spikes, whale alerts & opportunities
      description: "Deteksi listing coin baru, volume spike, whale alerts, dan trading opportunities dengan AI scoring"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - op
              properties:
                op:
                  type: string
                  enum: [new_listings, volume_spikes, opportunities, whale_alerts, alpha_screening, micro_caps, market_sentiment]
                  description: "Jenis operasi: new_listings (coin baru), volume_spikes (spike volume), opportunities (trading signals), whale_alerts (aktivitas whale), alpha_screening (4-layer CoinMarketCap analysis), micro_caps (micro-cap gems), market_sentiment (sentimen pasar)"
                  example: new_listings
                limit:
                  type: integer
                  minimum: 1
                  maximum: 100
                  default: 20
                  description: "Jumlah hasil maksimal"
                  example: 20
                symbol:
                  type: string
                  description: "Symbol crypto (optional, untuk operations tertentu)"
                  example: BTC
                timeframe:
                  type: string
                  enum: ["1h", "4h", "1d"]
                  description: "Timeframe analysis (optional)"
                  example: "4h"
      responses:
        '200':
          description: Success - hasil coin tracker
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        symbol:
                          type: string
                          description: "Crypto symbol"
                        name:
                          type: string
                          description: "Crypto name"
                        score:
                          type: number
                          description: "AI opportunity score (0-100)"
                        price:
                          type: number
                          description: "Current price"
                        volumeChange24h:
                          type: number
                          description: "24h volume change %"
                        marketCap:
                          type: number
                          description: "Market capitalization"
                        detectedAt:
                          type: string
                          format: date-time
                          description: "Detection timestamp"
                        recommendation:
                          type: string
                          description: "Trading recommendation"
                  timestamp:
                    type: string
                    format: date-time
