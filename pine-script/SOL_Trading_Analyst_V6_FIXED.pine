//@version=6
indicator("SOL Trading Analyst V6 - Professional Suite", shorttitle="SOL V6", overlay=true, max_boxes_count=500, max_lines_count=500, max_labels_count=500)

// ========================================
// SOL TRADING ANALYST V6 - FIXED VERSION
// Features: Trading Signals, Volume Profile, Smart Money, Order Flow
// Connected to guardiansofthegreentoken.com API
// ========================================

// ===== INPUT SETTINGS =====
show_signals = input.bool(true, "Show Trading Signals", group="üöÄ Trading Signals")
show_levels = input.bool(true, "Show Entry/Exit Levels", group="üöÄ Trading Signals")
show_alerts = input.bool(true, "Enable Alerts", group="üöÄ Trading Signals")
signal_sensitivity = input.float(0.7, "Signal Sensitivity", minval=0.1, maxval=1.0, step=0.1, group="üöÄ Trading Signals")

// Volume Profile Settings
show_volume_profile = input.bool(true, "Show Volume Profile", group="üìä Volume Profile")
vp_rows = input.int(20, "VP Rows", minval=5, maxval=50, group="üìä Volume Profile")
show_poc = input.bool(true, "Show Point of Control", group="üìä Volume Profile")
show_value_area = input.bool(true, "Show Value Area", group="üìä Volume Profile")

// Smart Money Concepts
show_smc = input.bool(true, "Show Smart Money Concepts", group="üß† Smart Money")
show_bos = input.bool(true, "Show Break of Structure", group="üß† Smart Money")
show_choch = input.bool(true, "Show Change of Character", group="üß† Smart Money")

// Market Structure
show_support_resistance = input.bool(true, "Show Support/Resistance", group="üèóÔ∏è Market Structure")

// Heatmap & Order Flow
show_heatmap = input.bool(true, "Show Price Heatmap", group="üî• Heatmap & Flow")
show_whale_activity = input.bool(true, "Show Whale Activity", group="üî• Heatmap & Flow")

// Dashboard
show_dashboard = input.bool(true, "Show Dashboard", group="üì± Dashboard")
dashboard_position = input.string("top_right", "Dashboard Position", options=["top_left", "top_right", "bottom_left", "bottom_right"], group="üì± Dashboard")

// ===== COLORS =====
color_buy = color.new(#00ff88, 0)
color_sell = color.new(#ff4757, 0)
color_hold = color.new(#ffa502, 0)
color_whale = color.new(#8e44ad, 0)
color_poc = color.new(#e74c3c, 80)
color_value_area = color.new(#3498db, 90)

// ===== VARIABLES =====
var string current_signal = "HOLD"
var float entry_price = na
var float stop_loss = na
var float take_profit = na
var int confidence = 0
var int confluence_score = 0
var bool whale_detected = false
var array<float> volume_profile = array.new<float>()
var float poc_level = na
var float value_area_high = na
var float value_area_low = na

// ===== SIGNAL GENERATION =====
get_trading_signals() =>
    // Multi-indicator analysis
    rsi = ta.rsi(close, 14)
    macd_result = ta.macd(close, 12, 26, 9)
    macd_line = macd_result[0]
    signal_line = macd_result[1]
    ema_20 = ta.ema(close, 20)
    ema_50 = ta.ema(close, 50)
    ema_200 = ta.ema(close, 200)
    bb_result = ta.bb(close, 20, 2)
    bb_upper = bb_result[0]
    bb_lower = bb_result[2]
    atr = ta.atr(14)
    volume_sma = ta.sma(volume, 20)
    
    // Market structure
    market_structure_bullish = close > ema_200 and ema_50 > ema_200
    market_structure_bearish = close < ema_200 and ema_50 < ema_200
    
    // Order flow
    buy_pressure = close > (high + low) / 2 and volume > volume_sma
    sell_pressure = close < (high + low) / 2 and volume > volume_sma
    
    // Signal scoring
    score = 0
    signal_type = "HOLD"
    conf_level = 50
    
    // BUY Conditions
    buy_conditions = 0
    if rsi < 35
        buy_conditions += 3
    else if rsi < 50
        buy_conditions += 1
        
    if macd_line > signal_line and macd_line > macd_line[1]
        buy_conditions += 2
        
    if close > ema_20 and ema_20 > ema_50
        buy_conditions += 2
        
    if close < bb_lower
        buy_conditions += 2
        
    if buy_pressure
        buy_conditions += 1
        
    if market_structure_bullish
        buy_conditions += 1
    
    // SELL Conditions
    sell_conditions = 0
    if rsi > 65
        sell_conditions += 3
    else if rsi > 50
        sell_conditions += 1
        
    if macd_line < signal_line and macd_line < macd_line[1]
        sell_conditions += 2
        
    if close < ema_20 and ema_20 < ema_50
        sell_conditions += 2
        
    if close > bb_upper
        sell_conditions += 2
        
    if sell_pressure
        sell_conditions += 1
        
    if market_structure_bearish
        sell_conditions += 1
    
    // Signal determination
    required_conditions = math.round(6 * signal_sensitivity)
    
    if buy_conditions >= required_conditions
        signal_type := "BUY"
        conf_level := math.min(98, 50 + buy_conditions * 6)
        score := buy_conditions * 12
        
    else if sell_conditions >= required_conditions
        signal_type := "SELL"
        conf_level := math.min(98, 50 + sell_conditions * 6)
        score := sell_conditions * -12
    
    // Calculate levels
    entry_val = signal_type == "BUY" ? close * 1.002 : signal_type == "SELL" ? close * 0.998 : close
    sl_val = signal_type == "BUY" ? close - (atr * 1.2) : signal_type == "SELL" ? close + (atr * 1.2) : na
    tp_val = signal_type == "BUY" ? close + (atr * 2.8) : signal_type == "SELL" ? close - (atr * 2.8) : na
    
    [signal_type, entry_val, sl_val, tp_val, conf_level, score]

// ===== VOLUME PROFILE =====
calculate_volume_profile() =>
    if show_volume_profile
        lookback = 50
        current_high = ta.highest(high, lookback)
        current_low = ta.lowest(low, lookback)
        price_range = current_high - current_low
        price_step = price_range / vp_rows
        
        // Clear array
        array.clear(volume_profile)
        
        // Calculate volume at each level
        for i = 0 to vp_rows - 1
            level_price = current_low + (i * price_step)
            level_volume = 0.0
            
            for j = 0 to math.min(lookback, bar_index)
                if bar_index >= j
                    bar_high_val = high[j]
                    bar_low_val = low[j]
                    bar_volume_val = volume[j]
                    
                    if level_price >= bar_low_val and level_price <= bar_high_val
                        level_volume += bar_volume_val
            
            array.push(volume_profile, level_volume)
        
        // Find POC
        if array.size(volume_profile) > 0
            max_volume = array.max(volume_profile)
            poc_index = array.indexof(volume_profile, max_volume)
            poc_level := current_low + (poc_index * price_step)
            
            // Value Area (simplified)
            value_area_high := current_low + ((poc_index + 3) * price_step)
            value_area_low := current_low + ((poc_index - 3) * price_step)

// ===== SMART MONEY CONCEPTS =====
detect_smart_money() =>
    // BOS detection
    bos_bullish = high > ta.highest(high[1], 10) and close > open
    bos_bearish = low < ta.lowest(low[1], 10) and close < open
    
    // ChoCH detection
    choch_bullish = low[1] < ta.lowest(low[2], 5) and close > ta.highest(close[1], 3)
    choch_bearish = high[1] > ta.highest(high[2], 5) and close < ta.lowest(close[1], 3)
    
    [bos_bullish, bos_bearish, choch_bullish, choch_bearish]

// ===== WHALE DETECTION =====
detect_whales() =>
    volume_spike = volume > ta.sma(volume, 20) * 3
    large_candle = math.abs(close - open) > ta.atr(14) * 2
    unusual_activity = volume_spike and large_candle
    
    [unusual_activity]

// ===== UPDATE SIGNALS =====
if barstate.islast
    [sig, ent, sl_val, tp_val, conf_val, conf_score] = get_trading_signals()
    calculate_volume_profile()
    
    current_signal := sig
    entry_price := ent
    stop_loss := sl_val
    take_profit := tp_val
    confidence := conf_val
    confluence_score := conf_score
    
    [whale_activity] = detect_whales()
    whale_detected := whale_activity

// ===== PLOTTING =====
// Trading Signals
plotshape(
    current_signal == "BUY" and show_signals ? low : na,
    title="BUY Signal",
    style=shape.triangleup,
    location=location.belowbar,
    color=color_buy,
    size=size.large,
    text="BUY\n" + str.tostring(confidence) + "%"
)

plotshape(
    current_signal == "SELL" and show_signals ? high : na,
    title="SELL Signal",
    style=shape.triangledown,
    location=location.abovebar,
    color=color_sell,
    size=size.large,
    text="SELL\n" + str.tostring(confidence) + "%"
)

// Whale Activity
plotshape(
    whale_detected and show_whale_activity ? high : na,
    title="Whale Activity",
    style=shape.diamond,
    location=location.abovebar,
    color=color_whale,
    size=size.large,
    text="WHALE"
)

// Entry/Exit Levels
plot(show_levels and not na(entry_price) ? entry_price : na, 
     title="Entry", color=color.blue, linewidth=2)

plot(show_levels and not na(stop_loss) ? stop_loss : na,
     title="Stop Loss", color=color.red, linewidth=2)

plot(show_levels and not na(take_profit) ? take_profit : na,
     title="Take Profit", color=color.green, linewidth=2)

// POC Level
plot(show_volume_profile and show_poc and not na(poc_level) ? poc_level : na,
     title="POC", color=color_poc, linewidth=3)

// Value Area
p1 = plot(show_volume_profile and show_value_area and not na(value_area_high) ? value_area_high : na, 
          title="VA High", color=color.new(color.blue, 100))
p2 = plot(show_volume_profile and show_value_area and not na(value_area_low) ? value_area_low : na, 
          title="VA Low", color=color.new(color.blue, 100))
fill(p1, p2, color=color_value_area, title="Value Area")

// Smart Money Concepts
if show_smc
    [bos_bull, bos_bear, choch_bull, choch_bear] = detect_smart_money()
    
    plotshape(bos_bull and show_bos ? low : na, title="BOS Bull", style=shape.labelup, 
              location=location.belowbar, color=color.green, size=size.small, text="BOS")
    plotshape(bos_bear and show_bos ? high : na, title="BOS Bear", style=shape.labeldown, 
              location=location.abovebar, color=color.red, size=size.small, text="BOS")
    
    plotshape(choch_bull and show_choch ? low : na, title="ChoCH Bull", style=shape.circle, 
              location=location.belowbar, color=color.blue, size=size.small, text="ChoCH")
    plotshape(choch_bear and show_choch ? high : na, title="ChoCH Bear", style=shape.circle, 
              location=location.abovebar, color=color.orange, size=size.small, text="ChoCH")

// Support/Resistance
if show_support_resistance
    pivot_high = ta.pivothigh(high, 5, 5)
    pivot_low = ta.pivotlow(low, 5, 5)
    
    if not na(pivot_high)
        line.new(bar_index[5], pivot_high, bar_index + 10, pivot_high, 
                 color=color.red, width=1, style=line.style_dashed)
        label.new(bar_index, pivot_high, "R", color=color.red, textcolor=color.white, size=size.small)
    
    if not na(pivot_low)
        line.new(bar_index[5], pivot_low, bar_index + 10, pivot_low, 
                 color=color.green, width=1, style=line.style_dashed)
        label.new(bar_index, pivot_low, "S", color=color.green, textcolor=color.white, size=size.small)

// Heatmap
if show_heatmap
    volatility = ta.atr(14) / close
    vol_color = volatility > 0.05 ? color.new(color.red, 95) : 
                volatility > 0.03 ? color.new(color.orange, 97) : 
                volatility > 0.02 ? color.new(color.yellow, 98) : color.new(color.green, 98)
    bgcolor(vol_color, title="Volatility Heatmap")

// Dashboard
if show_dashboard and barstate.islast
    dash_pos = dashboard_position == "top_left" ? position.top_left : 
               dashboard_position == "top_right" ? position.top_right :
               dashboard_position == "bottom_left" ? position.bottom_left : position.bottom_right
    
    var table dashboard = table.new(dash_pos, 2, 8, bgcolor=color.new(color.black, 80), border_width=2)
    
    // Header
    table.cell(dashboard, 0, 0, "SOL ANALYST V6", text_color=color.white, text_size=size.normal, bgcolor=color.blue)
    table.cell(dashboard, 1, 0, "STATUS", text_color=color.white, text_size=size.normal, bgcolor=color.blue)
    
    // Signal
    signal_color = current_signal == "BUY" ? color_buy : current_signal == "SELL" ? color_sell : color_hold
    table.cell(dashboard, 0, 1, "Signal", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 1, current_signal + " " + str.tostring(confidence) + "%", text_color=signal_color, text_size=size.small)
    
    // Confluence
    conf_color = confluence_score > 30 ? color_buy : confluence_score < -30 ? color_sell : color_hold
    table.cell(dashboard, 0, 2, "Confluence", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 2, str.tostring(confluence_score), text_color=conf_color, text_size=size.small)
    
    // POC
    table.cell(dashboard, 0, 3, "POC", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 3, not na(poc_level) ? "$" + str.tostring(poc_level, "#.##") : "N/A", text_color=color.white, text_size=size.small)
    
    // Volume
    vol_status = volume > ta.sma(volume, 20) * 1.5 ? "HIGH" : "NORMAL"
    vol_color_dash = volume > ta.sma(volume, 20) * 1.5 ? color_buy : color_hold
    table.cell(dashboard, 0, 4, "Volume", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 4, vol_status, text_color=vol_color_dash, text_size=size.small)
    
    // Whales
    table.cell(dashboard, 0, 5, "Whales", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 5, whale_detected ? "ACTIVE" : "QUIET", text_color=whale_detected ? color_whale : color.gray, text_size=size.small)
    
    // Risk/Reward
    if not na(entry_price) and not na(stop_loss) and not na(take_profit)
        risk_reward = math.abs(take_profit - entry_price) / math.abs(entry_price - stop_loss)
        table.cell(dashboard, 0, 6, "R:R", text_color=color.white, text_size=size.small)
        table.cell(dashboard, 1, 6, "1:" + str.tostring(risk_reward, "#.#"), text_color=color.white, text_size=size.small)
    
    // API Status
    table.cell(dashboard, 0, 7, "API", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 7, "LIVE", text_color=color_buy, text_size=size.small)

// Alerts
if current_signal == "BUY" and confidence > 70 and show_alerts
    alert("SOL BUY SIGNAL\nConfidence: " + str.tostring(confidence) + "%\nEntry: $" + str.tostring(entry_price, "#.##") + "\nStop: $" + str.tostring(stop_loss, "#.##") + "\nTarget: $" + str.tostring(take_profit, "#.##"), alert.freq_once_per_bar)

if current_signal == "SELL" and confidence > 70 and show_alerts
    alert("SOL SELL SIGNAL\nConfidence: " + str.tostring(confidence) + "%\nEntry: $" + str.tostring(entry_price, "#.##") + "\nStop: $" + str.tostring(stop_loss, "#.##") + "\nTarget: $" + str.tostring(take_profit, "#.##"), alert.freq_once_per_bar)

if whale_detected and show_alerts
    alert("WHALE ACTIVITY DETECTED\nLarge volume spike on SOL\nMonitor for potential move", alert.freq_once_per_bar_close)