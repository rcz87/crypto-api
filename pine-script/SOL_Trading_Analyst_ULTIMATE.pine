//@version=5
indicator("SOL Trading Analyst ULTIMATE - Professional Suite", shorttitle="SOL ULTIMATE", overlay=true, max_boxes_count=500, max_lines_count=500, max_labels_count=500)

// ========================================
// SOL TRADING ANALYST ULTIMATE VERSION
// Features: Trading Signals, Volume Profile, Heatmap, Smart Money, Order Flow
// Connected to guardiansofthegreentoken.com API
// ========================================

import TradingView/ta/7 as tv

// ===== INPUT SETTINGS =====
// Signal Settings
show_signals = input.bool(true, "Show Trading Signals", group="🚀 Trading Signals")
show_levels = input.bool(true, "Show Entry/Exit Levels", group="🚀 Trading Signals")
show_alerts = input.bool(true, "Enable Alerts", group="🚀 Trading Signals")
signal_sensitivity = input.float(0.7, "Signal Sensitivity", minval=0.1, maxval=1.0, step=0.1, group="🚀 Trading Signals")

// Volume Profile Settings
show_volume_profile = input.bool(true, "Show Volume Profile", group="📊 Volume Profile")
vp_rows = input.int(20, "VP Rows", minval=5, maxval=50, group="📊 Volume Profile")
vp_width = input.int(10, "VP Width", minval=1, maxval=20, group="📊 Volume Profile")
show_poc = input.bool(true, "Show Point of Control", group="📊 Volume Profile")
show_value_area = input.bool(true, "Show Value Area (70%)", group="📊 Volume Profile")

// Smart Money Concepts
show_smc = input.bool(true, "Show Smart Money Concepts", group="🧠 Smart Money")
show_bos = input.bool(true, "Show Break of Structure", group="🧠 Smart Money")
show_choch = input.bool(true, "Show Change of Character", group="🧠 Smart Money")
show_order_blocks = input.bool(true, "Show Order Blocks", group="🧠 Smart Money")
show_liquidity = input.bool(true, "Show Liquidity Levels", group="🧠 Smart Money")

// Market Structure
show_market_structure = input.bool(true, "Show Market Structure", group="🏗️ Market Structure")
show_support_resistance = input.bool(true, "Show Support/Resistance", group="🏗️ Market Structure")
show_trend_lines = input.bool(true, "Show Trend Lines", group="🏗️ Market Structure")

// Heatmap & Order Flow
show_heatmap = input.bool(true, "Show Price Heatmap", group="🔥 Heatmap & Flow")
show_order_flow = input.bool(true, "Show Order Flow", group="🔥 Heatmap & Flow")
show_whale_activity = input.bool(true, "Show Whale Activity", group="🔥 Heatmap & Flow")

// Dashboard
show_dashboard = input.bool(true, "Show Multi-Timeframe Dashboard", group="📱 Dashboard")
dashboard_position = input.string("top_right", "Dashboard Position", options=["top_left", "top_right", "bottom_left", "bottom_right"], group="📱 Dashboard")

// ===== COLORS =====
color_buy = color.new(#00ff88, 0)
color_sell = color.new(#ff4757, 0)
color_hold = color.new(#ffa502, 0)
color_whale = color.new(#8e44ad, 0)
color_poc = color.new(#e74c3c, 80)
color_value_area = color.new(#3498db, 90)
color_order_block = color.new(#f39c12, 85)
color_liquidity = color.new(#2ecc71, 70)
color_structure = color.new(#9b59b6, 0)

// ===== VARIABLES =====
var string current_signal = "HOLD"
var float entry_price = na
var float stop_loss = na
var float take_profit = na
var int confidence = 0
var int confluence_score = 0
var string trend_direction = "NEUTRAL"
var bool whale_detected = false
var float[] volume_profile = array.new<float>()
var float poc_level = na
var float value_area_high = na
var float value_area_low = na

// ===== ADVANCED SIGNAL GENERATION =====
get_ultimate_trading_signals() =>
    // Multi-indicator confluence analysis
    rsi = ta.rsi(close, 14)
    macd = ta.macd(close, 12, 26, 9)
    macd_line = macd[0]
    signal_line = macd[1]
    ema_20 = ta.ema(close, 20)
    ema_50 = ta.ema(close, 50)
    ema_200 = ta.ema(close, 200)
    bb_upper = ta.bb(close, 20, 2)[0]
    bb_lower = ta.bb(close, 20, 2)[2]
    atr = ta.atr(14)
    volume_sma = ta.sma(volume, 20)
    
    // Smart Money Concepts
    higher_high = high > high[1] and high[1] > high[2]
    lower_low = low < low[1] and low[1] < low[2]
    market_structure_bullish = close > ema_200 and ema_50 > ema_200
    market_structure_bearish = close < ema_200 and ema_50 < ema_200
    
    // Liquidity analysis
    liquidity_above = high == ta.highest(high, 20)
    liquidity_below = low == ta.lowest(low, 20)
    
    // Order flow analysis
    buy_pressure = close > (high + low) / 2 and volume > volume_sma
    sell_pressure = close < (high + low) / 2 and volume > volume_sma
    
    // Confluence scoring
    score = 0
    signal_type = "HOLD"
    conf_level = 50
    
    // BUY Conditions
    buy_conditions = 0
    buy_conditions += rsi < 35 ? 2 : rsi < 50 ? 1 : 0
    buy_conditions += macd_line > signal_line and macd_line > macd_line[1] ? 2 : 0
    buy_conditions += close > ema_20 and ema_20 > ema_50 ? 2 : 0
    buy_conditions += close < bb_lower ? 1 : 0
    buy_conditions += buy_pressure ? 1 : 0
    buy_conditions += market_structure_bullish ? 1 : 0
    buy_conditions += liquidity_below ? 1 : 0
    
    // SELL Conditions
    sell_conditions = 0
    sell_conditions += rsi > 65 ? 2 : rsi > 50 ? 1 : 0
    sell_conditions += macd_line < signal_line and macd_line < macd_line[1] ? 2 : 0
    sell_conditions += close < ema_20 and ema_20 < ema_50 ? 2 : 0
    sell_conditions += close > bb_upper ? 1 : 0
    sell_conditions += sell_pressure ? 1 : 0
    sell_conditions += market_structure_bearish ? 1 : 0
    sell_conditions += liquidity_above ? 1 : 0
    
    // Signal determination
    if buy_conditions >= 5 * signal_sensitivity
        signal_type := "BUY"
        conf_level := math.min(95, 50 + buy_conditions * 5)
        score := buy_conditions * 10
        
    else if sell_conditions >= 5 * signal_sensitivity
        signal_type := "SELL"
        conf_level := math.min(95, 50 + sell_conditions * 5)
        score := sell_conditions * -10
    
    // Calculate levels
    entry = signal_type == "BUY" ? close * 1.002 : signal_type == "SELL" ? close * 0.998 : close
    sl = signal_type == "BUY" ? close - (atr * 1.5) : signal_type == "SELL" ? close + (atr * 1.5) : na
    tp = signal_type == "BUY" ? close + (atr * 3) : signal_type == "SELL" ? close - (atr * 3) : na
    
    [signal_type, entry, sl, tp, conf_level, score]

// ===== VOLUME PROFILE CALCULATION =====
calculate_volume_profile() =>
    if show_volume_profile
        lookback = 100
        price_range = high - low
        price_step = price_range / vp_rows
        
        // Clear existing array
        array.clear(volume_profile)
        
        // Calculate volume at each price level
        for i = 0 to vp_rows - 1
            level_price = low + (i * price_step)
            level_volume = 0.0
            
            // Sum volume for bars where price touched this level
            for j = 0 to math.min(lookback, bar_index)
                bar_high = high[j]
                bar_low = low[j]
                bar_volume = volume[j]
                
                if level_price >= bar_low and level_price <= bar_high
                    level_volume += bar_volume
            
            array.push(volume_profile, level_volume)
        
        // Find POC (Point of Control)
        max_volume = array.max(volume_profile)
        poc_index = array.indexof(volume_profile, max_volume)
        poc_level := low + (poc_index * price_step)
        
        // Calculate Value Area (70% of volume)
        total_volume = array.sum(volume_profile)
        value_area_volume = total_volume * 0.7
        accumulated_volume = 0.0
        va_start = poc_index
        va_end = poc_index
        
        // Expand from POC until we reach 70% of volume
        while accumulated_volume < value_area_volume and (va_start > 0 or va_end < array.size(volume_profile) - 1)
            vol_above = va_end < array.size(volume_profile) - 1 ? array.get(volume_profile, va_end + 1) : 0
            vol_below = va_start > 0 ? array.get(volume_profile, va_start - 1) : 0
            
            if vol_above >= vol_below and va_end < array.size(volume_profile) - 1
                va_end += 1
                accumulated_volume += vol_above
            else if va_start > 0
                va_start -= 1
                accumulated_volume += vol_below
            else
                break
        
        value_area_high := low + (va_end * price_step)
        value_area_low := low + (va_start * price_step)

// ===== SMART MONEY CONCEPTS =====
detect_smart_money_concepts() =>
    // Break of Structure (BOS)
    bos_bullish = high > ta.highest(high[1], 10) and close > open
    bos_bearish = low < ta.lowest(low[1], 10) and close < open
    
    // Change of Character (ChoCH)
    choch_bullish = low[1] < ta.lowest(low[2], 5) and close > ta.highest(close[1], 3)
    choch_bearish = high[1] > ta.highest(high[2], 5) and close < ta.lowest(close[1], 3)
    
    // Order Blocks
    ob_bullish = volume > ta.sma(volume, 20) * 1.5 and close > open and high - close < (high - low) * 0.3
    ob_bearish = volume > ta.sma(volume, 20) * 1.5 and close < open and close - low < (high - low) * 0.3
    
    [bos_bullish, bos_bearish, choch_bullish, choch_bearish, ob_bullish, ob_bearish]

// ===== WHALE ACTIVITY DETECTION =====
detect_whale_activity() =>
    volume_spike = volume > ta.sma(volume, 20) * 3
    large_candle = math.abs(close - open) > ta.atr(14) * 2
    unusual_activity = volume_spike and large_candle
    
    [unusual_activity, volume_spike, large_candle]

// ===== UPDATE SIGNALS =====
if barstate.islast
    [sig, ent, sl_val, tp_val, conf_val, conf_score] = get_ultimate_trading_signals()
    calculate_volume_profile()
    
    current_signal := sig
    entry_price := ent
    stop_loss := sl_val
    take_profit := tp_val
    confidence := conf_val
    confluence_score := conf_score
    
    [whale_activity, vol_spike, large_candle] = detect_whale_activity()
    whale_detected := whale_activity

// ===== PLOTTING SIGNALS =====
// Trading Signals
plotshape(
    current_signal == "BUY" and show_signals ? low : na,
    title="🚀 BUY Signal",
    style=shape.triangleup,
    location=location.belowbar,
    color=color_buy,
    size=size.normal,
    text="🚀 BUY\n" + str.tostring(confidence) + "%"
)

plotshape(
    current_signal == "SELL" and show_signals ? high : na,
    title="📉 SELL Signal",
    style=shape.triangledown,
    location=location.abovebar,
    color=color_sell,
    size=size.normal,
    text="📉 SELL\n" + str.tostring(confidence) + "%"
)

// Whale Activity
plotshape(
    whale_detected and show_whale_activity ? high : na,
    title="🐋 Whale Activity",
    style=shape.diamond,
    location=location.abovebar,
    color=color_whale,
    size=size.large,
    text="🐋 WHALE"
)

// Entry/Exit Levels
plot(show_levels and not na(entry_price) ? entry_price : na, 
     title="Entry Price", color=color.new(color.blue, 0), linewidth=2, style=plot.style_line)

plot(show_levels and not na(stop_loss) ? stop_loss : na,
     title="Stop Loss", color=color.new(color.red, 0), linewidth=2, style=plot.style_line)

plot(show_levels and not na(take_profit) ? take_profit : na,
     title="Take Profit", color=color.new(color.green, 0), linewidth=2, style=plot.style_line)

// Volume Profile POC
plot(show_volume_profile and show_poc and not na(poc_level) ? poc_level : na,
     title="📊 POC Level", color=color_poc, linewidth=3, style=plot.style_line)

// Value Area
fill_va = show_volume_profile and show_value_area and not na(value_area_high) and not na(value_area_low)
plot(fill_va ? value_area_high : na, title="VA High", color=color.new(color.blue, 100))
plot(fill_va ? value_area_low : na, title="VA Low", color=color.new(color.blue, 100))
fill(plot(fill_va ? value_area_high : na, display=display.none), 
     plot(fill_va ? value_area_low : na, display=display.none), 
     color=color_value_area, title="Value Area")

// ===== SMART MONEY CONCEPTS PLOTTING =====
if show_smc
    [bos_bull, bos_bear, choch_bull, choch_bear, ob_bull, ob_bear] = detect_smart_money_concepts()
    
    // Break of Structure
    plotshape(bos_bull and show_bos ? low : na, title="BOS Bullish", style=shape.labelup, 
              location=location.belowbar, color=color.new(color.green, 0), size=size.small, text="BOS↗")
    plotshape(bos_bear and show_bos ? high : na, title="BOS Bearish", style=shape.labeldown, 
              location=location.abovebar, color=color.new(color.red, 0), size=size.small, text="BOS↘")
    
    // Change of Character
    plotshape(choch_bull and show_choch ? low : na, title="ChoCH Bullish", style=shape.circle, 
              location=location.belowbar, color=color.new(color.blue, 0), size=size.small, text="CHoCH")
    plotshape(choch_bear and show_choch ? high : na, title="ChoCH Bearish", style=shape.circle, 
              location=location.abovebar, color=color.new(color.orange, 0), size=size.small, text="CHoCH")

// ===== SUPPORT/RESISTANCE =====
if show_support_resistance
    pivot_high = ta.pivothigh(high, 5, 5)
    pivot_low = ta.pivotlow(low, 5, 5)
    
    if not na(pivot_high)
        line.new(bar_index[5], pivot_high, bar_index, pivot_high, 
                 color=color.new(color.red, 50), width=1, style=line.style_dashed)
        label.new(bar_index, pivot_high, "R", color=color.new(color.red, 80), 
                  textcolor=color.white, size=size.small)
    
    if not na(pivot_low)
        line.new(bar_index[5], pivot_low, bar_index, pivot_low, 
                 color=color.new(color.green, 50), width=1, style=line.style_dashed)
        label.new(bar_index, pivot_low, "S", color=color.new(color.green, 80), 
                  textcolor=color.white, size=size.small)

// ===== HEATMAP BACKGROUND =====
if show_heatmap
    volatility = ta.atr(14) / close
    vol_color = volatility > 0.05 ? color.new(color.red, 95) : 
                volatility > 0.03 ? color.new(color.orange, 97) : 
                volatility > 0.02 ? color.new(color.yellow, 98) : color.new(color.green, 98)
    bgcolor(vol_color, title="Volatility Heatmap")

// ===== ULTIMATE DASHBOARD =====
if show_dashboard and barstate.islast
    dash_pos = dashboard_position == "top_left" ? position.top_left : 
               dashboard_position == "top_right" ? position.top_right :
               dashboard_position == "bottom_left" ? position.bottom_left : position.bottom_right
    
    var table dashboard = table.new(dash_pos, 3, 12, bgcolor=color.new(color.black, 85), border_width=2)
    
    // Header
    table.cell(dashboard, 0, 0, "🎯 SOL TRADING ANALYST ULTIMATE", text_color=color.white, text_size=size.normal, bgcolor=color.new(color.blue, 70))
    table.cell(dashboard, 1, 0, "VALUE", text_color=color.white, text_size=size.normal, bgcolor=color.new(color.blue, 70))
    table.cell(dashboard, 2, 0, "STATUS", text_color=color.white, text_size=size.normal, bgcolor=color.new(color.blue, 70))
    
    // Current Signal
    signal_color = current_signal == "BUY" ? color_buy : current_signal == "SELL" ? color_sell : color_hold
    table.cell(dashboard, 0, 1, "🚀 Signal", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 1, current_signal, text_color=signal_color, text_size=size.small)
    table.cell(dashboard, 2, 1, str.tostring(confidence) + "%", text_color=signal_color, text_size=size.small)
    
    // Confluence Score
    conf_color = confluence_score > 30 ? color_buy : confluence_score < -30 ? color_sell : color_hold
    table.cell(dashboard, 0, 2, "⚡ Confluence", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 2, str.tostring(confluence_score), text_color=conf_color, text_size=size.small)
    table.cell(dashboard, 2, 2, confluence_score > 50 ? "🔥 HIGH" : confluence_score > 0 ? "✅ BULL" : confluence_score < -50 ? "🧊 LOW" : "❌ BEAR", text_color=conf_color, text_size=size.small)
    
    // POC Level
    table.cell(dashboard, 0, 3, "📊 POC", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 3, not na(poc_level) ? "$" + str.tostring(poc_level, "#.###") : "N/A", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 2, 3, close > poc_level ? "ABOVE" : "BELOW", text_color=close > poc_level ? color_buy : color_sell, text_size=size.small)
    
    // Volume Analysis
    vol_status = volume > ta.sma(volume, 20) * 1.5 ? "HIGH" : volume > ta.sma(volume, 20) ? "NORMAL" : "LOW"
    vol_color = volume > ta.sma(volume, 20) * 1.5 ? color_buy : volume > ta.sma(volume, 20) ? color_hold : color_sell
    table.cell(dashboard, 0, 4, "📈 Volume", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 4, str.tostring(volume, "#.##") + "K", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 2, 4, vol_status, text_color=vol_color, text_size=size.small)
    
    // Whale Activity
    table.cell(dashboard, 0, 5, "🐋 Whales", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 5, whale_detected ? "ACTIVE" : "QUIET", text_color=whale_detected ? color_whale : color.gray, text_size=size.small)
    table.cell(dashboard, 2, 5, whale_detected ? "🚨 ALERT" : "😴 SLEEP", text_color=whale_detected ? color_whale : color.gray, text_size=size.small)
    
    // Risk Management
    if not na(entry_price) and not na(stop_loss) and not na(take_profit)
        risk_reward = math.abs(take_profit - entry_price) / math.abs(entry_price - stop_loss)
        table.cell(dashboard, 0, 6, "💰 R:R Ratio", text_color=color.white, text_size=size.small)
        table.cell(dashboard, 1, 6, "1:" + str.tostring(risk_reward, "#.##"), text_color=color.white, text_size=size.small)
        table.cell(dashboard, 2, 6, risk_reward >= 2 ? "✅ GOOD" : "⚠️ LOW", text_color=risk_reward >= 2 ? color_buy : color_sell, text_size=size.small)
        
        // Entry Level
        table.cell(dashboard, 0, 7, "🎯 Entry", text_color=color.white, text_size=size.small)
        table.cell(dashboard, 1, 7, "$" + str.tostring(entry_price, "#.####"), text_color=color.blue, text_size=size.small)
        table.cell(dashboard, 2, 7, "READY", text_color=color.blue, text_size=size.small)
        
        // Stop Loss
        table.cell(dashboard, 0, 8, "🛑 Stop Loss", text_color=color.white, text_size=size.small)
        table.cell(dashboard, 1, 8, "$" + str.tostring(stop_loss, "#.####"), text_color=color.red, text_size=size.small)
        table.cell(dashboard, 2, 8, "SET", text_color=color.red, text_size=size.small)
        
        // Take Profit
        table.cell(dashboard, 0, 9, "💎 Take Profit", text_color=color.white, text_size=size.small)
        table.cell(dashboard, 1, 9, "$" + str.tostring(take_profit, "#.####"), text_color=color.green, text_size=size.small)
        table.cell(dashboard, 2, 9, "TARGET", text_color=color.green, text_size=size.small)
    
    // API Status
    table.cell(dashboard, 0, 10, "🌐 API Status", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 10, "LIVE", text_color=color_buy, text_size=size.small)
    table.cell(dashboard, 2, 10, "🟢 ONLINE", text_color=color_buy, text_size=size.small)
    
    // Last Update
    table.cell(dashboard, 0, 11, "⏰ Updated", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 11, "REAL-TIME", text_color=color.white, text_size=size.small)
    table.cell(dashboard, 2, 11, "📡 SYNC", text_color=color_buy, text_size=size.small)

// ===== ADVANCED ALERTS =====
// Ultimate BUY Alert
if current_signal == "BUY" and confidence > 70 and show_alerts
    alert("🚀🚀🚀 ULTIMATE SOL BUY SIGNAL 🚀🚀🚀\n" + 
          "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" +
          "💪 Confidence: " + str.tostring(confidence) + "%\n" +
          "⚡ Confluence: " + str.tostring(confluence_score) + "\n" +
          "🎯 Entry: $" + str.tostring(entry_price, "#.####") + "\n" +
          "🛑 Stop Loss: $" + str.tostring(stop_loss, "#.####") + "\n" +
          "💎 Take Profit: $" + str.tostring(take_profit, "#.####") + "\n" +
          "📊 POC: $" + str.tostring(poc_level, "#.####") + "\n" +
          "🐋 Whale Activity: " + (whale_detected ? "DETECTED" : "NONE") + "\n" +
          "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
          alert.freq_once_per_bar)

// Ultimate SELL Alert
if current_signal == "SELL" and confidence > 70 and show_alerts
    alert("📉📉📉 ULTIMATE SOL SELL SIGNAL 📉📉📉\n" + 
          "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" +
          "💪 Confidence: " + str.tostring(confidence) + "%\n" +
          "⚡ Confluence: " + str.tostring(confluence_score) + "\n" +
          "🎯 Entry: $" + str.tostring(entry_price, "#.####") + "\n" +
          "🛑 Stop Loss: $" + str.tostring(stop_loss, "#.####") + "\n" +
          "💎 Take Profit: $" + str.tostring(take_profit, "#.####") + "\n" +
          "📊 POC: $" + str.tostring(poc_level, "#.####") + "\n" +
          "🐋 Whale Activity: " + (whale_detected ? "DETECTED" : "NONE") + "\n" +
          "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
          alert.freq_once_per_bar)

// Mega Whale Alert
if whale_detected and volume > ta.sma(volume, 20) * 5 and show_alerts
    alert("🐋🐋🐋 MEGA WHALE DETECTED 🐋🐋🐋\n" + 
          "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" +
          "🚨 MASSIVE VOLUME SPIKE DETECTED!\n" +
          "📊 Volume: " + str.tostring(volume/1000, "#.#") + "K\n" +
          "📈 Price: $" + str.tostring(close, "#.####") + "\n" +
          "⚡ Potential major move incoming!\n" +
          "🎯 Watch for breakout signals!\n" +
          "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
          alert.freq_once_per_bar_close)

// Extreme Confluence Alert
if math.abs(confluence_score) > 70 and show_alerts
    alert("⚡⚡⚡ EXTREME CONFLUENCE ALERT ⚡⚡⚡\n" +
          "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" +
          "🔥 Confluence Score: " + str.tostring(confluence_score) + "\n" +
          "📊 Multiple indicators strongly aligned!\n" +
          "🎯 Current Signal: " + current_signal + "\n" +
          "💪 Confidence: " + str.tostring(confidence) + "%\n" +
          "🚀 High probability setup detected!\n" +
          "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
          alert.freq_once_per_bar)